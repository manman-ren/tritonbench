; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @_attn_fwd_tma_ws_persistent(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, float %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19, i32 %20, ptr addrspace(1) %21) local_unnamed_addr #0 !dbg !5 {
  %23 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %24 = lshr i32 %23, 5, !dbg !8
  %25 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %24, i32 0, i32 31), !dbg !8
  %26 = icmp ult i32 %25, 8, !dbg !8
  br i1 %26, label %1192, label %.preheader, !dbg !8

.preheader:                                       ; preds = %22, %.preheader.backedge
  tail call void @llvm.nvvm.setmaxnreg.dec.sync.aligned.u32(i32 24), !dbg !8
  tail call void asm sideeffect "barrier.sync 1 ;", ""() #7, !dbg !8
  %27 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230208), i32 %25, !dbg !8
  %28 = getelementptr i8, ptr addrspace(3) %27, i32 -8, !dbg !8
  %29 = load i8, ptr addrspace(3) %28, align 1, !dbg !8
  switch i8 %29, label %30 [
    i8 0, label %31
    i8 1, label %899
    i8 2, label %979
    i8 3, label %1056
    i8 4, label %1124
    i8 5, label %common.ret
  ], !dbg !8

30:                                               ; preds = %.preheader
  tail call void asm sideeffect "barrier.sync 1 ;", ""() #7, !dbg !8
  tail call void asm sideeffect "barrier.sync 1 ;", ""() #7, !dbg !8
  br label %.preheader.backedge, !dbg !8

common.ret:                                       ; preds = %.preheader, %._crit_edge308
  ret void, !dbg !9

31:                                               ; preds = %.preheader
  tail call void @llvm.nvvm.setmaxnreg.inc.sync.aligned.u32(i32 112), !dbg !8
  %32 = load ptr addrspace(3), ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229376), align 16, !dbg !8
  %33 = load ptr addrspace(3), ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229384), align 8, !dbg !8
  tail call void asm sideeffect "barrier.sync 1 ;", ""() #7, !dbg !8
  %34 = add i32 %20, 127, !dbg !10
  %35 = sdiv i32 %34, 128, !dbg !14
  %36 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !15
  %37 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x(), !dbg !16
  %38 = mul i32 %19, %18, !dbg !17
  %39 = mul i32 %38, %35, !dbg !18
  %.frozen = freeze i32 %39, !dbg !19
  %40 = sdiv i32 %.frozen, %37, !dbg !19
  %41 = mul i32 %40, %37, !dbg !20
  %.decomposed = sub i32 %.frozen, %41, !dbg !20
  %42 = icmp slt i32 %36, %.decomposed, !dbg !21
  %43 = zext i1 %42 to i32, !dbg !22
  %44 = add i32 %40, %43, !dbg !22
  %45 = mul i32 %38, %20, !dbg !23
  %46 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !24
  %47 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.z(), !dbg !24
  %48 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.y(), !dbg !24
  %49 = mul i32 %47, %48, !dbg !24
  %50 = add i32 %49, %46, !dbg !24
  %51 = mul i32 %50, %37, !dbg !24
  %52 = add i32 %51, %36, !dbg !24
  %53 = mul i32 %52, 768, !dbg !24
  %54 = add i32 %53, 256, !dbg !24
  %55 = sext i32 %54 to i64, !dbg !24
  %56 = getelementptr i8, ptr addrspace(1) %21, i64 %55, !dbg !24
  %57 = add i32 %23, -256, !dbg !24
  %58 = icmp slt i32 %57, 32, !dbg !24
  %59 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 %57, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> zeroinitializer, i1 %58) #7, !dbg !24
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !24
  %60 = icmp eq i32 %57, 0, !dbg !24
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), ptr addrspace(1) %0, i1 %60) #7, !dbg !24
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i1 %60) #7, !dbg !24
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 64, i1 %60) #7, !dbg !24
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 64, i1 %60) #7, !dbg !24
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 128, i1 %60) #7, !dbg !24
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 %45, i1 %60) #7, !dbg !24
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i64 256, i1 %60) #7, !dbg !24
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 1, i1 %60) #7, !dbg !24
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 1, i1 %60) #7, !dbg !24
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0xa;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i1 %60) #7, !dbg !24
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i1 %60) #7, !dbg !24
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x3;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i1 %60) #7, !dbg !24
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i1 %60) #7, !dbg !24
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %56, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i1 %58) #7, !dbg !24
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %56, i1 %58) #7, !dbg !24
  tail call void asm sideeffect "barrier.sync.aligned 2, 256 ;", ""() #7, !dbg !24
  %61 = add i32 %53, 384, !dbg !25
  %62 = sext i32 %61 to i64, !dbg !25
  %63 = getelementptr i8, ptr addrspace(1) %21, i64 %62, !dbg !25
  tail call void asm sideeffect "barrier.sync.aligned 2, 256 ;", ""() #7, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> zeroinitializer, i1 %58) #7, !dbg !25
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !25
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), ptr addrspace(1) %5, i1 %60) #7, !dbg !25
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i1 %60) #7, !dbg !25
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 64, i1 %60) #7, !dbg !25
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 64, i1 %60) #7, !dbg !25
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 128, i1 %60) #7, !dbg !25
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 %45, i1 %60) #7, !dbg !25
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i64 256, i1 %60) #7, !dbg !25
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 1, i1 %60) #7, !dbg !25
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 1, i1 %60) #7, !dbg !25
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0xa;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i1 %60) #7, !dbg !25
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i1 %60) #7, !dbg !25
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x3;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i1 %60) #7, !dbg !25
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i1 %60) #7, !dbg !25
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %63, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i1 %58) #7, !dbg !25
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %63, i1 %58) #7, !dbg !25
  tail call void asm sideeffect "barrier.sync.aligned 2, 256 ;", ""() #7, !dbg !25
  %64 = insertelement <2 x i32> poison, i32 %7, i64 0, !dbg !26
  %65 = insertelement <2 x i32> %64, i32 %6, i64 1, !dbg !26
  %66 = sext <2 x i32> %65 to <2 x i64>, !dbg !26
  %67 = lshr i32 %57, 5, !dbg !29
  %68 = fmul float %3, 0x3FF7154760000000, !dbg !30
  %69 = sext i32 %8 to i64, !dbg !31
  %70 = sext i32 %17 to i64, !dbg !32
  %71 = icmp sgt i32 %44, 0, !dbg !33
  br i1 %71, label %.lr.ph298, label %._crit_edge299, !dbg !33

.lr.ph298:                                        ; preds = %31
  %72 = and i32 %23, 63, !dbg !29
  %73 = and i32 %23, 15, !dbg !29
  %74 = and i32 %23, 4, !dbg !29
  %75 = icmp eq i32 %74, 0, !dbg !29
  %76 = and i32 %23, 2, !dbg !29
  %77 = icmp eq i32 %76, 0, !dbg !29
  %78 = and i32 %23, 1, !dbg !29
  %.not21 = icmp eq i32 %78, 0, !dbg !29
  %79 = and i32 %23, 16, !dbg !29
  %80 = icmp ult i32 %57, 64
  %81 = ptrtoint ptr addrspace(3) %32 to i32
  %82 = ptrtoint ptr addrspace(3) %33 to i32
  %83 = icmp sgt i32 %20, 0
  %84 = lshr i32 %23, 7
  %85 = and i32 %84, 1
  %86 = icmp eq i32 %79, 0
  %87 = shl nuw nsw i32 %73, 1
  %.mask = and i32 %23, 96
  %88 = or disjoint i32 %87, %.mask
  %89 = or disjoint i32 %88, %85
  %90 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 %89
  %91 = icmp slt i32 %57, 128
  %92 = and i1 %91, %.not21
  %93 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 %88
  %94 = select i1 %.not21, i32 0, i32 72
  %95 = select i1 %77, i32 0, i32 144
  %96 = select i1 %75, i32 0, i32 288
  %97 = shl i32 %23, 6
  %98 = and i32 %97, 512
  %99 = or disjoint i32 %96, %98
  %100 = or disjoint i32 %99, %95
  %101 = or disjoint i32 %100, %94
  %102 = shl nuw nsw i32 %79, 1
  %103 = xor i32 %101, %102
  %104 = shl i32 %23, 5
  %105 = and i32 %104, 1024
  %106 = or disjoint i32 %103, %105
  %107 = shl i32 %23, 5
  %and.ra252 = and i32 %107, 6144
  %108 = xor i32 %106, %and.ra252
  %109 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 180224), i32 %108
  %110 = xor i32 %108, 8
  %111 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 180224), i32 %110
  %112 = or disjoint i32 %94, 16
  %113 = xor i32 %112, %95
  %114 = or disjoint i32 %98, %113
  %115 = or disjoint i32 %114, %96
  %116 = or disjoint i32 %102, %and.ra252
  %117 = or disjoint i32 %116, %105
  %118 = xor i32 %117, %115
  %119 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 180224), i32 %118
  %120 = xor i32 %108, 24
  %121 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 180224), i32 %120
  %122 = lshr i32 %23, 1
  %123 = and i32 %122, 48
  %124 = or disjoint i32 %123, %73
  %125 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 %124
  %126 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 %72
  %127 = and i32 %23, 192
  %128 = icmp eq i32 %127, 0
  %129 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 %108
  %130 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 %110
  %131 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 %118
  %132 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 %120
  %invariant.op = or disjoint i32 %72, 64, !dbg !33
  br label %133, !dbg !33

133:                                              ; preds = %.lr.ph298, %__nv_log2f.exit
  %134 = phi i1 [ false, %.lr.ph298 ], [ %.lcssa264, %__nv_log2f.exit ]
  %135 = phi i32 [ 0, %.lr.ph298 ], [ %898, %__nv_log2f.exit ]
  %136 = phi i32 [ %36, %.lr.ph298 ], [ %897, %__nv_log2f.exit ]
  %.frozen365 = freeze i32 %136, !dbg !34
  %.frozen366 = freeze i32 %35, !dbg !34
  %137 = sdiv i32 %.frozen365, %.frozen366, !dbg !34
  %138 = mul i32 %137, %.frozen366, !dbg !35
  %.decomposed367 = sub i32 %.frozen365, %138, !dbg !35
  %.frozen368 = freeze i32 %19, !dbg !36
  %139 = sdiv i32 %137, %.frozen368, !dbg !36
  %140 = mul i32 %139, %.frozen368, !dbg !37
  %.decomposed369 = sub i32 %137, %140, !dbg !37
  %141 = insertelement <2 x i32> poison, i32 %.decomposed369, i64 0, !dbg !38
  %142 = insertelement <2 x i32> %141, i32 %139, i64 1, !dbg !38
  %143 = sext <2 x i32> %142 to <2 x i64>, !dbg !38
  %144 = mul nsw <2 x i64> %143, %66, !dbg !26
  %shift = shufflevector <2 x i64> %144, <2 x i64> poison, <2 x i32> <i32 1, i32 poison>, !dbg !39
  %145 = add <2 x i64> %144, %shift, !dbg !39
  %146 = extractelement <2 x i64> %145, i64 0, !dbg !39
  %147 = shl nsw i32 %.decomposed367, 7, !dbg !40
  %.reass = or disjoint i32 %147, %invariant.op
  %148 = sdiv i64 %146, %69, !dbg !31
  %149 = trunc i64 %148 to i32, !dbg !41
  %150 = or disjoint i32 %147, 64, !dbg !41
  %151 = add i32 %150, %149, !dbg !41
  %152 = and i32 %135, 1, !dbg !42
  %153 = xor i32 %152, 1, !dbg !42
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230368), i32 %153) #7, !dbg !42
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 16384;", "b,r"(i1 %60, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230320)) #7, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 2, 256 ;", ""() #7, !dbg !8
  %154 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %67, i32 0, i32 31), !dbg !8
  %155 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !8
  %156 = extractvalue { i32, i1 } %155, 1, !dbg !8
  %157 = and i1 %80, %156, !dbg !8
  %158 = shl i32 %154, 12, !dbg !8
  %159 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 147456), i32 %158, !dbg !8
  %160 = shl i32 %154, 6, !dbg !8
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %157, ptr addrspace(3) %159, ptr addrspace(1) %56, i32 %160, i32 %151, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230320)) #7, !dbg !8
  %161 = shl i32 %154, 21, !dbg !43
  %162 = and i32 %161, 6291456, !dbg !43
  %163 = shl i32 %154, 4, !dbg !43
  %164 = and i32 %163, 64, !dbg !43
  %165 = shl i32 %154, 3, !dbg !43
  %166 = and i32 %165, -64, !dbg !43
  %167 = add i32 %164, %166, !dbg !43
  %168 = add i32 %167, %162, !dbg !43
  %169 = add i32 %168, %82, !dbg !43
  tail call void asm sideeffect "@$0 tcgen05.st.sync.aligned.16x32bx2.x32.b32 [$1], 32, {$2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33};", "b,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r"(i1 true, i32 %169, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00) #7, !dbg !43
  tail call void asm sideeffect "tcgen05.wait::st.sync.aligned;", ""() #7, !dbg !43
  tail call void asm sideeffect "barrier.sync.aligned 2, 256 ;", ""() #7, !dbg !43
  br i1 %83, label %.lr.ph292, label %._crit_edge293, !dbg !44

.lr.ph292:                                        ; preds = %133
  %170 = add i32 %168, %81
  br label %171, !dbg !44

171:                                              ; preds = %.lr.ph292, %__nv_exp2f.exit119
  %172 = phi i1 [ %134, %.lr.ph292 ], [ %562, %__nv_exp2f.exit119 ]
  %173 = phi float [ 0xFFF0000000000000, %.lr.ph292 ], [ %286, %__nv_exp2f.exit119 ]
  %174 = phi float [ 1.000000e+00, %.lr.ph292 ], [ %561, %__nv_exp2f.exit119 ]
  %175 = phi i32 [ 0, %.lr.ph292 ], [ %697, %__nv_exp2f.exit119 ]
  %176 = sext i1 %172 to i32, !dbg !45
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230288), i32 %176) #7, !dbg !45
  %177 = tail call { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } asm sideeffect "tcgen05.ld.sync.aligned.16x32bx2.x32.b32 {$0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31}, [$32], 32;", "=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,r"(i32 %170) #7, !dbg !45
  %178 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 0, !dbg !45
  %179 = bitcast i32 %178 to float, !dbg !45
  %180 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 1, !dbg !45
  %181 = bitcast i32 %180 to float, !dbg !45
  %182 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 2, !dbg !45
  %183 = bitcast i32 %182 to float, !dbg !45
  %184 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 3, !dbg !45
  %185 = bitcast i32 %184 to float, !dbg !45
  %186 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 4, !dbg !45
  %187 = bitcast i32 %186 to float, !dbg !45
  %188 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 5, !dbg !45
  %189 = bitcast i32 %188 to float, !dbg !45
  %190 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 6, !dbg !45
  %191 = bitcast i32 %190 to float, !dbg !45
  %192 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 7, !dbg !45
  %193 = bitcast i32 %192 to float, !dbg !45
  %194 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 8, !dbg !45
  %195 = bitcast i32 %194 to float, !dbg !45
  %196 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 9, !dbg !45
  %197 = bitcast i32 %196 to float, !dbg !45
  %198 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 10, !dbg !45
  %199 = bitcast i32 %198 to float, !dbg !45
  %200 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 11, !dbg !45
  %201 = bitcast i32 %200 to float, !dbg !45
  %202 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 12, !dbg !45
  %203 = bitcast i32 %202 to float, !dbg !45
  %204 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 13, !dbg !45
  %205 = bitcast i32 %204 to float, !dbg !45
  %206 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 14, !dbg !45
  %207 = bitcast i32 %206 to float, !dbg !45
  %208 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 15, !dbg !45
  %209 = bitcast i32 %208 to float, !dbg !45
  %210 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 16, !dbg !45
  %211 = bitcast i32 %210 to float, !dbg !45
  %212 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 17, !dbg !45
  %213 = bitcast i32 %212 to float, !dbg !45
  %214 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 18, !dbg !45
  %215 = bitcast i32 %214 to float, !dbg !45
  %216 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 19, !dbg !45
  %217 = bitcast i32 %216 to float, !dbg !45
  %218 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 20, !dbg !45
  %219 = bitcast i32 %218 to float, !dbg !45
  %220 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 21, !dbg !45
  %221 = bitcast i32 %220 to float, !dbg !45
  %222 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 22, !dbg !45
  %223 = bitcast i32 %222 to float, !dbg !45
  %224 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 23, !dbg !45
  %225 = bitcast i32 %224 to float, !dbg !45
  %226 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 24, !dbg !45
  %227 = bitcast i32 %226 to float, !dbg !45
  %228 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 25, !dbg !45
  %229 = bitcast i32 %228 to float, !dbg !45
  %230 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 26, !dbg !45
  %231 = bitcast i32 %230 to float, !dbg !45
  %232 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 27, !dbg !45
  %233 = bitcast i32 %232 to float, !dbg !45
  %234 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 28, !dbg !45
  %235 = bitcast i32 %234 to float, !dbg !45
  %236 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 29, !dbg !45
  %237 = bitcast i32 %236 to float, !dbg !45
  %238 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 30, !dbg !45
  %239 = bitcast i32 %238 to float, !dbg !45
  %240 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %177, 31, !dbg !45
  %241 = bitcast i32 %240 to float, !dbg !45
  tail call void asm sideeffect "tcgen05.wait::ld.sync.aligned;", ""() #7, !dbg !45
  tail call void asm sideeffect "@$1 mbarrier.arrive.shared.b64 _, [$0];", "r,b"(i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230400) to i32), i1 true) #7, !dbg !45
  tail call void asm sideeffect "barrier.sync.aligned 2, 256 ;", ""() #7, !dbg !46
  %242 = tail call float @llvm.maxnum.f32(float %179, float %181), !dbg !47
  %243 = tail call float @llvm.maxnum.f32(float %242, float %183), !dbg !47
  %244 = tail call float @llvm.maxnum.f32(float %243, float %185), !dbg !47
  %245 = tail call float @llvm.maxnum.f32(float %244, float %187), !dbg !47
  %246 = tail call float @llvm.maxnum.f32(float %245, float %189), !dbg !47
  %247 = tail call float @llvm.maxnum.f32(float %246, float %191), !dbg !47
  %248 = tail call float @llvm.maxnum.f32(float %247, float %193), !dbg !47
  %249 = tail call float @llvm.maxnum.f32(float %248, float %195), !dbg !47
  %250 = tail call float @llvm.maxnum.f32(float %249, float %197), !dbg !47
  %251 = tail call float @llvm.maxnum.f32(float %250, float %199), !dbg !47
  %252 = tail call float @llvm.maxnum.f32(float %251, float %201), !dbg !47
  %253 = tail call float @llvm.maxnum.f32(float %252, float %203), !dbg !47
  %254 = tail call float @llvm.maxnum.f32(float %253, float %205), !dbg !47
  %255 = tail call float @llvm.maxnum.f32(float %254, float %207), !dbg !47
  %256 = tail call float @llvm.maxnum.f32(float %255, float %209), !dbg !47
  %257 = tail call float @llvm.maxnum.f32(float %256, float %211), !dbg !47
  %258 = tail call float @llvm.maxnum.f32(float %257, float %213), !dbg !47
  %259 = tail call float @llvm.maxnum.f32(float %258, float %215), !dbg !47
  %260 = tail call float @llvm.maxnum.f32(float %259, float %217), !dbg !47
  %261 = tail call float @llvm.maxnum.f32(float %260, float %219), !dbg !47
  %262 = tail call float @llvm.maxnum.f32(float %261, float %221), !dbg !47
  %263 = tail call float @llvm.maxnum.f32(float %262, float %223), !dbg !47
  %264 = tail call float @llvm.maxnum.f32(float %263, float %225), !dbg !47
  %265 = tail call float @llvm.maxnum.f32(float %264, float %227), !dbg !47
  %266 = tail call float @llvm.maxnum.f32(float %265, float %229), !dbg !47
  %267 = tail call float @llvm.maxnum.f32(float %266, float %231), !dbg !47
  %268 = tail call float @llvm.maxnum.f32(float %267, float %233), !dbg !47
  %269 = tail call float @llvm.maxnum.f32(float %268, float %235), !dbg !47
  %270 = tail call float @llvm.maxnum.f32(float %269, float %237), !dbg !47
  %271 = tail call float @llvm.maxnum.f32(float %270, float %239), !dbg !47
  %272 = tail call float @llvm.maxnum.f32(float %271, float %241), !dbg !47
  %273 = bitcast float %272 to i32, !dbg !46
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 16, i32 31), !dbg !46
  %275 = bitcast i32 %274 to float, !dbg !46
  %276 = tail call float @llvm.maxnum.f32(float %272, float %275), !dbg !47
  %277 = bitcast float %276 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %277, i1 %86) #7, !dbg !46
  tail call void asm sideeffect "barrier.sync.aligned 2, 256 ;", ""() #7, !dbg !46
  %278 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %59, i1 %91) #7, !dbg !46
  %279 = bitcast i32 %278 to float, !dbg !46
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 1, i32 31), !dbg !46
  %281 = bitcast i32 %280 to float, !dbg !46
  %282 = tail call float @llvm.maxnum.f32(float %279, float %281), !dbg !47
  %283 = bitcast float %282 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %283, i1 %92) #7, !dbg !46
  tail call void asm sideeffect "barrier.sync.aligned 2, 256 ;", ""() #7, !dbg !46
  %284 = load float, ptr addrspace(3) %93, align 8, !dbg !46
  %285 = fmul float %68, %284, !dbg !48
  %286 = tail call float @llvm.maxnum.f32(float %173, float %285), !dbg !49
  %287 = fmul float %68, %179, !dbg !50
  %288 = fmul float %68, %181, !dbg !50
  %289 = fmul float %68, %183, !dbg !50
  %290 = fmul float %68, %185, !dbg !50
  %291 = fmul float %68, %187, !dbg !50
  %292 = fmul float %68, %189, !dbg !50
  %293 = fmul float %68, %191, !dbg !50
  %294 = fmul float %68, %193, !dbg !50
  %295 = fmul float %68, %195, !dbg !50
  %296 = fmul float %68, %197, !dbg !50
  %297 = fmul float %68, %199, !dbg !50
  %298 = fmul float %68, %201, !dbg !50
  %299 = fmul float %68, %203, !dbg !50
  %300 = fmul float %68, %205, !dbg !50
  %301 = fmul float %68, %207, !dbg !50
  %302 = fmul float %68, %209, !dbg !50
  %303 = fmul float %68, %211, !dbg !50
  %304 = fmul float %68, %213, !dbg !50
  %305 = fmul float %68, %215, !dbg !50
  %306 = fmul float %68, %217, !dbg !50
  %307 = fmul float %68, %219, !dbg !50
  %308 = fmul float %68, %221, !dbg !50
  %309 = fmul float %68, %223, !dbg !50
  %310 = fmul float %68, %225, !dbg !50
  %311 = fmul float %68, %227, !dbg !50
  %312 = fmul float %68, %229, !dbg !50
  %313 = fmul float %68, %231, !dbg !50
  %314 = fmul float %68, %233, !dbg !50
  %315 = fmul float %68, %235, !dbg !50
  %316 = fmul float %68, %237, !dbg !50
  %317 = fmul float %68, %239, !dbg !50
  %318 = fmul float %68, %241, !dbg !50
  %319 = fsub float %287, %286, !dbg !51
  %320 = fsub float %288, %286, !dbg !51
  %321 = fsub float %289, %286, !dbg !51
  %322 = fsub float %290, %286, !dbg !51
  %323 = fsub float %291, %286, !dbg !51
  %324 = fsub float %292, %286, !dbg !51
  %325 = fsub float %293, %286, !dbg !51
  %326 = fsub float %294, %286, !dbg !51
  %327 = fsub float %295, %286, !dbg !51
  %328 = fsub float %296, %286, !dbg !51
  %329 = fsub float %297, %286, !dbg !51
  %330 = fsub float %298, %286, !dbg !51
  %331 = fsub float %299, %286, !dbg !51
  %332 = fsub float %300, %286, !dbg !51
  %333 = fsub float %301, %286, !dbg !51
  %334 = fsub float %302, %286, !dbg !51
  %335 = fsub float %303, %286, !dbg !51
  %336 = fsub float %304, %286, !dbg !51
  %337 = fsub float %305, %286, !dbg !51
  %338 = fsub float %306, %286, !dbg !51
  %339 = fsub float %307, %286, !dbg !51
  %340 = fsub float %308, %286, !dbg !51
  %341 = fsub float %309, %286, !dbg !51
  %342 = fsub float %310, %286, !dbg !51
  %343 = fsub float %311, %286, !dbg !51
  %344 = fsub float %312, %286, !dbg !51
  %345 = fsub float %313, %286, !dbg !51
  %346 = fsub float %314, %286, !dbg !51
  %347 = fsub float %315, %286, !dbg !51
  %348 = fsub float %316, %286, !dbg !51
  %349 = fsub float %317, %286, !dbg !51
  %350 = fsub float %318, %286, !dbg !51
  %351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i = icmp eq i32 %351, 0, !dbg !52
  br i1 %.not.i, label %354, label %352, !dbg !52

352:                                              ; preds = %171
  %353 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %319) #7, !dbg !52
  br label %__nv_exp2f.exit, !dbg !52

354:                                              ; preds = %171
  %355 = tail call float @llvm.nvvm.ex2.approx.f(float %319) #7, !dbg !52
  br label %__nv_exp2f.exit, !dbg !52

__nv_exp2f.exit:                                  ; preds = %352, %354
  %.0.i = phi float [ %353, %352 ], [ %355, %354 ], !dbg !52
  %356 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i24 = icmp eq i32 %356, 0, !dbg !52
  br i1 %.not.i24, label %359, label %357, !dbg !52

357:                                              ; preds = %__nv_exp2f.exit
  %358 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %320) #7, !dbg !52
  br label %__nv_exp2f.exit26, !dbg !52

359:                                              ; preds = %__nv_exp2f.exit
  %360 = tail call float @llvm.nvvm.ex2.approx.f(float %320) #7, !dbg !52
  br label %__nv_exp2f.exit26, !dbg !52

__nv_exp2f.exit26:                                ; preds = %357, %359
  %.0.i25 = phi float [ %358, %357 ], [ %360, %359 ], !dbg !52
  %361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i27 = icmp eq i32 %361, 0, !dbg !52
  br i1 %.not.i27, label %364, label %362, !dbg !52

362:                                              ; preds = %__nv_exp2f.exit26
  %363 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %321) #7, !dbg !52
  br label %__nv_exp2f.exit29, !dbg !52

364:                                              ; preds = %__nv_exp2f.exit26
  %365 = tail call float @llvm.nvvm.ex2.approx.f(float %321) #7, !dbg !52
  br label %__nv_exp2f.exit29, !dbg !52

__nv_exp2f.exit29:                                ; preds = %362, %364
  %.0.i28 = phi float [ %363, %362 ], [ %365, %364 ], !dbg !52
  %366 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i30 = icmp eq i32 %366, 0, !dbg !52
  br i1 %.not.i30, label %369, label %367, !dbg !52

367:                                              ; preds = %__nv_exp2f.exit29
  %368 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %322) #7, !dbg !52
  br label %__nv_exp2f.exit32, !dbg !52

369:                                              ; preds = %__nv_exp2f.exit29
  %370 = tail call float @llvm.nvvm.ex2.approx.f(float %322) #7, !dbg !52
  br label %__nv_exp2f.exit32, !dbg !52

__nv_exp2f.exit32:                                ; preds = %367, %369
  %.0.i31 = phi float [ %368, %367 ], [ %370, %369 ], !dbg !52
  %371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i33 = icmp eq i32 %371, 0, !dbg !52
  br i1 %.not.i33, label %374, label %372, !dbg !52

372:                                              ; preds = %__nv_exp2f.exit32
  %373 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %323) #7, !dbg !52
  br label %__nv_exp2f.exit35, !dbg !52

374:                                              ; preds = %__nv_exp2f.exit32
  %375 = tail call float @llvm.nvvm.ex2.approx.f(float %323) #7, !dbg !52
  br label %__nv_exp2f.exit35, !dbg !52

__nv_exp2f.exit35:                                ; preds = %372, %374
  %.0.i34 = phi float [ %373, %372 ], [ %375, %374 ], !dbg !52
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i36 = icmp eq i32 %376, 0, !dbg !52
  br i1 %.not.i36, label %379, label %377, !dbg !52

377:                                              ; preds = %__nv_exp2f.exit35
  %378 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %324) #7, !dbg !52
  br label %__nv_exp2f.exit38, !dbg !52

379:                                              ; preds = %__nv_exp2f.exit35
  %380 = tail call float @llvm.nvvm.ex2.approx.f(float %324) #7, !dbg !52
  br label %__nv_exp2f.exit38, !dbg !52

__nv_exp2f.exit38:                                ; preds = %377, %379
  %.0.i37 = phi float [ %378, %377 ], [ %380, %379 ], !dbg !52
  %381 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i39 = icmp eq i32 %381, 0, !dbg !52
  br i1 %.not.i39, label %384, label %382, !dbg !52

382:                                              ; preds = %__nv_exp2f.exit38
  %383 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %325) #7, !dbg !52
  br label %__nv_exp2f.exit41, !dbg !52

384:                                              ; preds = %__nv_exp2f.exit38
  %385 = tail call float @llvm.nvvm.ex2.approx.f(float %325) #7, !dbg !52
  br label %__nv_exp2f.exit41, !dbg !52

__nv_exp2f.exit41:                                ; preds = %382, %384
  %.0.i40 = phi float [ %383, %382 ], [ %385, %384 ], !dbg !52
  %386 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i42 = icmp eq i32 %386, 0, !dbg !52
  br i1 %.not.i42, label %389, label %387, !dbg !52

387:                                              ; preds = %__nv_exp2f.exit41
  %388 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %326) #7, !dbg !52
  br label %__nv_exp2f.exit44, !dbg !52

389:                                              ; preds = %__nv_exp2f.exit41
  %390 = tail call float @llvm.nvvm.ex2.approx.f(float %326) #7, !dbg !52
  br label %__nv_exp2f.exit44, !dbg !52

__nv_exp2f.exit44:                                ; preds = %387, %389
  %.0.i43 = phi float [ %388, %387 ], [ %390, %389 ], !dbg !52
  %391 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i45 = icmp eq i32 %391, 0, !dbg !52
  br i1 %.not.i45, label %394, label %392, !dbg !52

392:                                              ; preds = %__nv_exp2f.exit44
  %393 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %327) #7, !dbg !52
  br label %__nv_exp2f.exit47, !dbg !52

394:                                              ; preds = %__nv_exp2f.exit44
  %395 = tail call float @llvm.nvvm.ex2.approx.f(float %327) #7, !dbg !52
  br label %__nv_exp2f.exit47, !dbg !52

__nv_exp2f.exit47:                                ; preds = %392, %394
  %.0.i46 = phi float [ %393, %392 ], [ %395, %394 ], !dbg !52
  %396 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i48 = icmp eq i32 %396, 0, !dbg !52
  br i1 %.not.i48, label %399, label %397, !dbg !52

397:                                              ; preds = %__nv_exp2f.exit47
  %398 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %328) #7, !dbg !52
  br label %__nv_exp2f.exit50, !dbg !52

399:                                              ; preds = %__nv_exp2f.exit47
  %400 = tail call float @llvm.nvvm.ex2.approx.f(float %328) #7, !dbg !52
  br label %__nv_exp2f.exit50, !dbg !52

__nv_exp2f.exit50:                                ; preds = %397, %399
  %.0.i49 = phi float [ %398, %397 ], [ %400, %399 ], !dbg !52
  %401 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i51 = icmp eq i32 %401, 0, !dbg !52
  br i1 %.not.i51, label %404, label %402, !dbg !52

402:                                              ; preds = %__nv_exp2f.exit50
  %403 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %329) #7, !dbg !52
  br label %__nv_exp2f.exit53, !dbg !52

404:                                              ; preds = %__nv_exp2f.exit50
  %405 = tail call float @llvm.nvvm.ex2.approx.f(float %329) #7, !dbg !52
  br label %__nv_exp2f.exit53, !dbg !52

__nv_exp2f.exit53:                                ; preds = %402, %404
  %.0.i52 = phi float [ %403, %402 ], [ %405, %404 ], !dbg !52
  %406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i54 = icmp eq i32 %406, 0, !dbg !52
  br i1 %.not.i54, label %409, label %407, !dbg !52

407:                                              ; preds = %__nv_exp2f.exit53
  %408 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %330) #7, !dbg !52
  br label %__nv_exp2f.exit56, !dbg !52

409:                                              ; preds = %__nv_exp2f.exit53
  %410 = tail call float @llvm.nvvm.ex2.approx.f(float %330) #7, !dbg !52
  br label %__nv_exp2f.exit56, !dbg !52

__nv_exp2f.exit56:                                ; preds = %407, %409
  %.0.i55 = phi float [ %408, %407 ], [ %410, %409 ], !dbg !52
  %411 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i57 = icmp eq i32 %411, 0, !dbg !52
  br i1 %.not.i57, label %414, label %412, !dbg !52

412:                                              ; preds = %__nv_exp2f.exit56
  %413 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %331) #7, !dbg !52
  br label %__nv_exp2f.exit59, !dbg !52

414:                                              ; preds = %__nv_exp2f.exit56
  %415 = tail call float @llvm.nvvm.ex2.approx.f(float %331) #7, !dbg !52
  br label %__nv_exp2f.exit59, !dbg !52

__nv_exp2f.exit59:                                ; preds = %412, %414
  %.0.i58 = phi float [ %413, %412 ], [ %415, %414 ], !dbg !52
  %416 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i60 = icmp eq i32 %416, 0, !dbg !52
  br i1 %.not.i60, label %419, label %417, !dbg !52

417:                                              ; preds = %__nv_exp2f.exit59
  %418 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %332) #7, !dbg !52
  br label %__nv_exp2f.exit62, !dbg !52

419:                                              ; preds = %__nv_exp2f.exit59
  %420 = tail call float @llvm.nvvm.ex2.approx.f(float %332) #7, !dbg !52
  br label %__nv_exp2f.exit62, !dbg !52

__nv_exp2f.exit62:                                ; preds = %417, %419
  %.0.i61 = phi float [ %418, %417 ], [ %420, %419 ], !dbg !52
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i63 = icmp eq i32 %421, 0, !dbg !52
  br i1 %.not.i63, label %424, label %422, !dbg !52

422:                                              ; preds = %__nv_exp2f.exit62
  %423 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %333) #7, !dbg !52
  br label %__nv_exp2f.exit65, !dbg !52

424:                                              ; preds = %__nv_exp2f.exit62
  %425 = tail call float @llvm.nvvm.ex2.approx.f(float %333) #7, !dbg !52
  br label %__nv_exp2f.exit65, !dbg !52

__nv_exp2f.exit65:                                ; preds = %422, %424
  %.0.i64 = phi float [ %423, %422 ], [ %425, %424 ], !dbg !52
  %426 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i66 = icmp eq i32 %426, 0, !dbg !52
  br i1 %.not.i66, label %429, label %427, !dbg !52

427:                                              ; preds = %__nv_exp2f.exit65
  %428 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %334) #7, !dbg !52
  br label %__nv_exp2f.exit68, !dbg !52

429:                                              ; preds = %__nv_exp2f.exit65
  %430 = tail call float @llvm.nvvm.ex2.approx.f(float %334) #7, !dbg !52
  br label %__nv_exp2f.exit68, !dbg !52

__nv_exp2f.exit68:                                ; preds = %427, %429
  %.0.i67 = phi float [ %428, %427 ], [ %430, %429 ], !dbg !52
  %431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i69 = icmp eq i32 %431, 0, !dbg !52
  br i1 %.not.i69, label %434, label %432, !dbg !52

432:                                              ; preds = %__nv_exp2f.exit68
  %433 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %335) #7, !dbg !52
  br label %__nv_exp2f.exit71, !dbg !52

434:                                              ; preds = %__nv_exp2f.exit68
  %435 = tail call float @llvm.nvvm.ex2.approx.f(float %335) #7, !dbg !52
  br label %__nv_exp2f.exit71, !dbg !52

__nv_exp2f.exit71:                                ; preds = %432, %434
  %.0.i70 = phi float [ %433, %432 ], [ %435, %434 ], !dbg !52
  %436 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i72 = icmp eq i32 %436, 0, !dbg !52
  br i1 %.not.i72, label %439, label %437, !dbg !52

437:                                              ; preds = %__nv_exp2f.exit71
  %438 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %336) #7, !dbg !52
  br label %__nv_exp2f.exit74, !dbg !52

439:                                              ; preds = %__nv_exp2f.exit71
  %440 = tail call float @llvm.nvvm.ex2.approx.f(float %336) #7, !dbg !52
  br label %__nv_exp2f.exit74, !dbg !52

__nv_exp2f.exit74:                                ; preds = %437, %439
  %.0.i73 = phi float [ %438, %437 ], [ %440, %439 ], !dbg !52
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i75 = icmp eq i32 %441, 0, !dbg !52
  br i1 %.not.i75, label %444, label %442, !dbg !52

442:                                              ; preds = %__nv_exp2f.exit74
  %443 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %337) #7, !dbg !52
  br label %__nv_exp2f.exit77, !dbg !52

444:                                              ; preds = %__nv_exp2f.exit74
  %445 = tail call float @llvm.nvvm.ex2.approx.f(float %337) #7, !dbg !52
  br label %__nv_exp2f.exit77, !dbg !52

__nv_exp2f.exit77:                                ; preds = %442, %444
  %.0.i76 = phi float [ %443, %442 ], [ %445, %444 ], !dbg !52
  %446 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i78 = icmp eq i32 %446, 0, !dbg !52
  br i1 %.not.i78, label %449, label %447, !dbg !52

447:                                              ; preds = %__nv_exp2f.exit77
  %448 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %338) #7, !dbg !52
  br label %__nv_exp2f.exit80, !dbg !52

449:                                              ; preds = %__nv_exp2f.exit77
  %450 = tail call float @llvm.nvvm.ex2.approx.f(float %338) #7, !dbg !52
  br label %__nv_exp2f.exit80, !dbg !52

__nv_exp2f.exit80:                                ; preds = %447, %449
  %.0.i79 = phi float [ %448, %447 ], [ %450, %449 ], !dbg !52
  %451 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i81 = icmp eq i32 %451, 0, !dbg !52
  br i1 %.not.i81, label %454, label %452, !dbg !52

452:                                              ; preds = %__nv_exp2f.exit80
  %453 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %339) #7, !dbg !52
  br label %__nv_exp2f.exit83, !dbg !52

454:                                              ; preds = %__nv_exp2f.exit80
  %455 = tail call float @llvm.nvvm.ex2.approx.f(float %339) #7, !dbg !52
  br label %__nv_exp2f.exit83, !dbg !52

__nv_exp2f.exit83:                                ; preds = %452, %454
  %.0.i82 = phi float [ %453, %452 ], [ %455, %454 ], !dbg !52
  %456 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i84 = icmp eq i32 %456, 0, !dbg !52
  br i1 %.not.i84, label %459, label %457, !dbg !52

457:                                              ; preds = %__nv_exp2f.exit83
  %458 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %340) #7, !dbg !52
  br label %__nv_exp2f.exit86, !dbg !52

459:                                              ; preds = %__nv_exp2f.exit83
  %460 = tail call float @llvm.nvvm.ex2.approx.f(float %340) #7, !dbg !52
  br label %__nv_exp2f.exit86, !dbg !52

__nv_exp2f.exit86:                                ; preds = %457, %459
  %.0.i85 = phi float [ %458, %457 ], [ %460, %459 ], !dbg !52
  %461 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i87 = icmp eq i32 %461, 0, !dbg !52
  br i1 %.not.i87, label %464, label %462, !dbg !52

462:                                              ; preds = %__nv_exp2f.exit86
  %463 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %341) #7, !dbg !52
  br label %__nv_exp2f.exit89, !dbg !52

464:                                              ; preds = %__nv_exp2f.exit86
  %465 = tail call float @llvm.nvvm.ex2.approx.f(float %341) #7, !dbg !52
  br label %__nv_exp2f.exit89, !dbg !52

__nv_exp2f.exit89:                                ; preds = %462, %464
  %.0.i88 = phi float [ %463, %462 ], [ %465, %464 ], !dbg !52
  %466 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i90 = icmp eq i32 %466, 0, !dbg !52
  br i1 %.not.i90, label %469, label %467, !dbg !52

467:                                              ; preds = %__nv_exp2f.exit89
  %468 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %342) #7, !dbg !52
  br label %__nv_exp2f.exit92, !dbg !52

469:                                              ; preds = %__nv_exp2f.exit89
  %470 = tail call float @llvm.nvvm.ex2.approx.f(float %342) #7, !dbg !52
  br label %__nv_exp2f.exit92, !dbg !52

__nv_exp2f.exit92:                                ; preds = %467, %469
  %.0.i91 = phi float [ %468, %467 ], [ %470, %469 ], !dbg !52
  %471 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i93 = icmp eq i32 %471, 0, !dbg !52
  br i1 %.not.i93, label %474, label %472, !dbg !52

472:                                              ; preds = %__nv_exp2f.exit92
  %473 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %343) #7, !dbg !52
  br label %__nv_exp2f.exit95, !dbg !52

474:                                              ; preds = %__nv_exp2f.exit92
  %475 = tail call float @llvm.nvvm.ex2.approx.f(float %343) #7, !dbg !52
  br label %__nv_exp2f.exit95, !dbg !52

__nv_exp2f.exit95:                                ; preds = %472, %474
  %.0.i94 = phi float [ %473, %472 ], [ %475, %474 ], !dbg !52
  %476 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i96 = icmp eq i32 %476, 0, !dbg !52
  br i1 %.not.i96, label %479, label %477, !dbg !52

477:                                              ; preds = %__nv_exp2f.exit95
  %478 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %344) #7, !dbg !52
  br label %__nv_exp2f.exit98, !dbg !52

479:                                              ; preds = %__nv_exp2f.exit95
  %480 = tail call float @llvm.nvvm.ex2.approx.f(float %344) #7, !dbg !52
  br label %__nv_exp2f.exit98, !dbg !52

__nv_exp2f.exit98:                                ; preds = %477, %479
  %.0.i97 = phi float [ %478, %477 ], [ %480, %479 ], !dbg !52
  %481 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i99 = icmp eq i32 %481, 0, !dbg !52
  br i1 %.not.i99, label %484, label %482, !dbg !52

482:                                              ; preds = %__nv_exp2f.exit98
  %483 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %345) #7, !dbg !52
  br label %__nv_exp2f.exit101, !dbg !52

484:                                              ; preds = %__nv_exp2f.exit98
  %485 = tail call float @llvm.nvvm.ex2.approx.f(float %345) #7, !dbg !52
  br label %__nv_exp2f.exit101, !dbg !52

__nv_exp2f.exit101:                               ; preds = %482, %484
  %.0.i100 = phi float [ %483, %482 ], [ %485, %484 ], !dbg !52
  %486 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i102 = icmp eq i32 %486, 0, !dbg !52
  br i1 %.not.i102, label %489, label %487, !dbg !52

487:                                              ; preds = %__nv_exp2f.exit101
  %488 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %346) #7, !dbg !52
  br label %__nv_exp2f.exit104, !dbg !52

489:                                              ; preds = %__nv_exp2f.exit101
  %490 = tail call float @llvm.nvvm.ex2.approx.f(float %346) #7, !dbg !52
  br label %__nv_exp2f.exit104, !dbg !52

__nv_exp2f.exit104:                               ; preds = %487, %489
  %.0.i103 = phi float [ %488, %487 ], [ %490, %489 ], !dbg !52
  %491 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i105 = icmp eq i32 %491, 0, !dbg !52
  br i1 %.not.i105, label %494, label %492, !dbg !52

492:                                              ; preds = %__nv_exp2f.exit104
  %493 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %347) #7, !dbg !52
  br label %__nv_exp2f.exit107, !dbg !52

494:                                              ; preds = %__nv_exp2f.exit104
  %495 = tail call float @llvm.nvvm.ex2.approx.f(float %347) #7, !dbg !52
  br label %__nv_exp2f.exit107, !dbg !52

__nv_exp2f.exit107:                               ; preds = %492, %494
  %.0.i106 = phi float [ %493, %492 ], [ %495, %494 ], !dbg !52
  %496 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i108 = icmp eq i32 %496, 0, !dbg !52
  br i1 %.not.i108, label %499, label %497, !dbg !52

497:                                              ; preds = %__nv_exp2f.exit107
  %498 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %348) #7, !dbg !52
  br label %__nv_exp2f.exit110, !dbg !52

499:                                              ; preds = %__nv_exp2f.exit107
  %500 = tail call float @llvm.nvvm.ex2.approx.f(float %348) #7, !dbg !52
  br label %__nv_exp2f.exit110, !dbg !52

__nv_exp2f.exit110:                               ; preds = %497, %499
  %.0.i109 = phi float [ %498, %497 ], [ %500, %499 ], !dbg !52
  %501 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i111 = icmp eq i32 %501, 0, !dbg !52
  br i1 %.not.i111, label %504, label %502, !dbg !52

502:                                              ; preds = %__nv_exp2f.exit110
  %503 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %349) #7, !dbg !52
  br label %__nv_exp2f.exit113, !dbg !52

504:                                              ; preds = %__nv_exp2f.exit110
  %505 = tail call float @llvm.nvvm.ex2.approx.f(float %349) #7, !dbg !52
  br label %__nv_exp2f.exit113, !dbg !52

__nv_exp2f.exit113:                               ; preds = %502, %504
  %.0.i112 = phi float [ %503, %502 ], [ %505, %504 ], !dbg !52
  %506 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !52
  %.not.i114 = icmp eq i32 %506, 0, !dbg !52
  br i1 %.not.i114, label %509, label %507, !dbg !52

507:                                              ; preds = %__nv_exp2f.exit113
  %508 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %350) #7, !dbg !52
  br label %__nv_exp2f.exit116, !dbg !52

509:                                              ; preds = %__nv_exp2f.exit113
  %510 = tail call float @llvm.nvvm.ex2.approx.f(float %350) #7, !dbg !52
  br label %__nv_exp2f.exit116, !dbg !52

__nv_exp2f.exit116:                               ; preds = %507, %509
  %.0.i115 = phi float [ %508, %507 ], [ %510, %509 ], !dbg !52
  tail call void asm sideeffect "barrier.sync.aligned 2, 256 ;", ""() #7, !dbg !53
  %511 = fadd float %.0.i, %.0.i25, !dbg !54
  %512 = fadd float %511, %.0.i28, !dbg !54
  %513 = fadd float %512, %.0.i31, !dbg !54
  %514 = fadd float %513, %.0.i34, !dbg !54
  %515 = fadd float %514, %.0.i37, !dbg !54
  %516 = fadd float %515, %.0.i40, !dbg !54
  %517 = fadd float %516, %.0.i43, !dbg !54
  %518 = fadd float %517, %.0.i46, !dbg !54
  %519 = fadd float %518, %.0.i49, !dbg !54
  %520 = fadd float %519, %.0.i52, !dbg !54
  %521 = fadd float %520, %.0.i55, !dbg !54
  %522 = fadd float %521, %.0.i58, !dbg !54
  %523 = fadd float %522, %.0.i61, !dbg !54
  %524 = fadd float %523, %.0.i64, !dbg !54
  %525 = fadd float %524, %.0.i67, !dbg !54
  %526 = fadd float %525, %.0.i70, !dbg !54
  %527 = fadd float %526, %.0.i73, !dbg !54
  %528 = fadd float %527, %.0.i76, !dbg !54
  %529 = fadd float %528, %.0.i79, !dbg !54
  %530 = fadd float %529, %.0.i82, !dbg !54
  %531 = fadd float %530, %.0.i85, !dbg !54
  %532 = fadd float %531, %.0.i88, !dbg !54
  %533 = fadd float %532, %.0.i91, !dbg !54
  %534 = fadd float %533, %.0.i94, !dbg !54
  %535 = fadd float %534, %.0.i97, !dbg !54
  %536 = fadd float %535, %.0.i100, !dbg !54
  %537 = fadd float %536, %.0.i103, !dbg !54
  %538 = fadd float %537, %.0.i106, !dbg !54
  %539 = fadd float %538, %.0.i109, !dbg !54
  %540 = fadd float %539, %.0.i112, !dbg !54
  %541 = fadd float %540, %.0.i115, !dbg !54
  %542 = bitcast float %541 to i32, !dbg !53
  %543 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %542, i32 16, i32 31), !dbg !53
  %544 = bitcast i32 %543 to float, !dbg !53
  %545 = fadd float %541, %544, !dbg !54
  %546 = bitcast float %545 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %546, i1 %86) #7, !dbg !53
  tail call void asm sideeffect "barrier.sync.aligned 2, 256 ;", ""() #7, !dbg !53
  %547 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %59, i1 %91) #7, !dbg !53
  %548 = bitcast i32 %547 to float, !dbg !53
  %549 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %547, i32 1, i32 31), !dbg !53
  %550 = bitcast i32 %549 to float, !dbg !53
  %551 = fadd float %548, %550, !dbg !54
  %552 = bitcast float %551 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %552, i1 %92) #7, !dbg !53
  tail call void asm sideeffect "barrier.sync.aligned 2, 256 ;", ""() #7, !dbg !53
  %553 = load float, ptr addrspace(3) %93, align 8, !dbg !53
  %554 = fsub float %173, %286, !dbg !55
  %555 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !56
  %.not.i117 = icmp eq i32 %555, 0, !dbg !56
  br i1 %.not.i117, label %558, label %556, !dbg !56

556:                                              ; preds = %__nv_exp2f.exit116
  %557 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %554) #7, !dbg !56
  br label %__nv_exp2f.exit119, !dbg !56

558:                                              ; preds = %__nv_exp2f.exit116
  %559 = tail call float @llvm.nvvm.ex2.approx.f(float %554) #7, !dbg !56
  br label %__nv_exp2f.exit119, !dbg !56

__nv_exp2f.exit119:                               ; preds = %556, %558
  %.0.i118 = phi float [ %557, %556 ], [ %559, %558 ], !dbg !56
  %560 = fmul float %174, %.0.i118, !dbg !57
  %561 = fadd float %553, %560, !dbg !58
  %562 = xor i1 %172, true, !dbg !59
  %563 = sext i1 %562 to i32, !dbg !59
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230240), i32 %563) #7, !dbg !43
  %564 = tail call { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } asm sideeffect "tcgen05.ld.sync.aligned.16x32bx2.x32.b32 {$0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31}, [$32], 32;", "=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,r"(i32 %169) #7, !dbg !43
  %565 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 0, !dbg !43
  %566 = bitcast i32 %565 to float, !dbg !43
  %567 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 1, !dbg !43
  %568 = bitcast i32 %567 to float, !dbg !43
  %569 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 2, !dbg !43
  %570 = bitcast i32 %569 to float, !dbg !43
  %571 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 3, !dbg !43
  %572 = bitcast i32 %571 to float, !dbg !43
  %573 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 4, !dbg !43
  %574 = bitcast i32 %573 to float, !dbg !43
  %575 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 5, !dbg !43
  %576 = bitcast i32 %575 to float, !dbg !43
  %577 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 6, !dbg !43
  %578 = bitcast i32 %577 to float, !dbg !43
  %579 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 7, !dbg !43
  %580 = bitcast i32 %579 to float, !dbg !43
  %581 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 8, !dbg !43
  %582 = bitcast i32 %581 to float, !dbg !43
  %583 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 9, !dbg !43
  %584 = bitcast i32 %583 to float, !dbg !43
  %585 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 10, !dbg !43
  %586 = bitcast i32 %585 to float, !dbg !43
  %587 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 11, !dbg !43
  %588 = bitcast i32 %587 to float, !dbg !43
  %589 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 12, !dbg !43
  %590 = bitcast i32 %589 to float, !dbg !43
  %591 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 13, !dbg !43
  %592 = bitcast i32 %591 to float, !dbg !43
  %593 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 14, !dbg !43
  %594 = bitcast i32 %593 to float, !dbg !43
  %595 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 15, !dbg !43
  %596 = bitcast i32 %595 to float, !dbg !43
  %597 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 16, !dbg !43
  %598 = bitcast i32 %597 to float, !dbg !43
  %599 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 17, !dbg !43
  %600 = bitcast i32 %599 to float, !dbg !43
  %601 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 18, !dbg !43
  %602 = bitcast i32 %601 to float, !dbg !43
  %603 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 19, !dbg !43
  %604 = bitcast i32 %603 to float, !dbg !43
  %605 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 20, !dbg !43
  %606 = bitcast i32 %605 to float, !dbg !43
  %607 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 21, !dbg !43
  %608 = bitcast i32 %607 to float, !dbg !43
  %609 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 22, !dbg !43
  %610 = bitcast i32 %609 to float, !dbg !43
  %611 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 23, !dbg !43
  %612 = bitcast i32 %611 to float, !dbg !43
  %613 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 24, !dbg !43
  %614 = bitcast i32 %613 to float, !dbg !43
  %615 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 25, !dbg !43
  %616 = bitcast i32 %615 to float, !dbg !43
  %617 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 26, !dbg !43
  %618 = bitcast i32 %617 to float, !dbg !43
  %619 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 27, !dbg !43
  %620 = bitcast i32 %619 to float, !dbg !43
  %621 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 28, !dbg !43
  %622 = bitcast i32 %621 to float, !dbg !43
  %623 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 29, !dbg !43
  %624 = bitcast i32 %623 to float, !dbg !43
  %625 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 30, !dbg !43
  %626 = bitcast i32 %625 to float, !dbg !43
  %627 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %564, 31, !dbg !43
  %628 = bitcast i32 %627 to float, !dbg !43
  tail call void asm sideeffect "tcgen05.wait::ld.sync.aligned;", ""() #7, !dbg !43
  tail call void asm sideeffect "@$1 mbarrier.arrive.shared.b64 _, [$0];", "r,b"(i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230448) to i32), i1 true) #7, !dbg !43
  %629 = fmul float %.0.i118, %566, !dbg !60
  %630 = fmul float %.0.i118, %568, !dbg !60
  %631 = fmul float %.0.i118, %570, !dbg !60
  %632 = fmul float %.0.i118, %572, !dbg !60
  %633 = fmul float %.0.i118, %574, !dbg !60
  %634 = fmul float %.0.i118, %576, !dbg !60
  %635 = fmul float %.0.i118, %578, !dbg !60
  %636 = fmul float %.0.i118, %580, !dbg !60
  %637 = fmul float %.0.i118, %582, !dbg !60
  %638 = fmul float %.0.i118, %584, !dbg !60
  %639 = fmul float %.0.i118, %586, !dbg !60
  %640 = fmul float %.0.i118, %588, !dbg !60
  %641 = fmul float %.0.i118, %590, !dbg !60
  %642 = fmul float %.0.i118, %592, !dbg !60
  %643 = fmul float %.0.i118, %594, !dbg !60
  %644 = fmul float %.0.i118, %596, !dbg !60
  %645 = fmul float %.0.i118, %598, !dbg !60
  %646 = fmul float %.0.i118, %600, !dbg !60
  %647 = fmul float %.0.i118, %602, !dbg !60
  %648 = fmul float %.0.i118, %604, !dbg !60
  %649 = fmul float %.0.i118, %606, !dbg !60
  %650 = fmul float %.0.i118, %608, !dbg !60
  %651 = fmul float %.0.i118, %610, !dbg !60
  %652 = fmul float %.0.i118, %612, !dbg !60
  %653 = fmul float %.0.i118, %614, !dbg !60
  %654 = fmul float %.0.i118, %616, !dbg !60
  %655 = fmul float %.0.i118, %618, !dbg !60
  %656 = fmul float %.0.i118, %620, !dbg !60
  %657 = fmul float %.0.i118, %622, !dbg !60
  %658 = fmul float %.0.i118, %624, !dbg !60
  %659 = fmul float %.0.i118, %626, !dbg !60
  %660 = fmul float %.0.i118, %628, !dbg !60
  %661 = insertelement <8 x float> poison, float %.0.i, i64 0, !dbg !59
  %662 = insertelement <8 x float> %661, float %.0.i25, i64 1, !dbg !59
  %663 = insertelement <8 x float> %662, float %.0.i28, i64 2, !dbg !59
  %664 = insertelement <8 x float> %663, float %.0.i31, i64 3, !dbg !59
  %665 = insertelement <8 x float> %664, float %.0.i34, i64 4, !dbg !59
  %666 = insertelement <8 x float> %665, float %.0.i37, i64 5, !dbg !59
  %667 = insertelement <8 x float> %666, float %.0.i40, i64 6, !dbg !59
  %668 = insertelement <8 x float> %667, float %.0.i43, i64 7, !dbg !59
  %669 = fptrunc <8 x float> %668 to <8 x bfloat>, !dbg !59
  %670 = insertelement <8 x float> poison, float %.0.i46, i64 0, !dbg !59
  %671 = insertelement <8 x float> %670, float %.0.i49, i64 1, !dbg !59
  %672 = insertelement <8 x float> %671, float %.0.i52, i64 2, !dbg !59
  %673 = insertelement <8 x float> %672, float %.0.i55, i64 3, !dbg !59
  %674 = insertelement <8 x float> %673, float %.0.i58, i64 4, !dbg !59
  %675 = insertelement <8 x float> %674, float %.0.i61, i64 5, !dbg !59
  %676 = insertelement <8 x float> %675, float %.0.i64, i64 6, !dbg !59
  %677 = insertelement <8 x float> %676, float %.0.i67, i64 7, !dbg !59
  %678 = fptrunc <8 x float> %677 to <8 x bfloat>, !dbg !59
  %679 = insertelement <8 x float> poison, float %.0.i70, i64 0, !dbg !59
  %680 = insertelement <8 x float> %679, float %.0.i73, i64 1, !dbg !59
  %681 = insertelement <8 x float> %680, float %.0.i76, i64 2, !dbg !59
  %682 = insertelement <8 x float> %681, float %.0.i79, i64 3, !dbg !59
  %683 = insertelement <8 x float> %682, float %.0.i82, i64 4, !dbg !59
  %684 = insertelement <8 x float> %683, float %.0.i85, i64 5, !dbg !59
  %685 = insertelement <8 x float> %684, float %.0.i88, i64 6, !dbg !59
  %686 = insertelement <8 x float> %685, float %.0.i91, i64 7, !dbg !59
  %687 = fptrunc <8 x float> %686 to <8 x bfloat>, !dbg !59
  %688 = insertelement <8 x float> poison, float %.0.i94, i64 0, !dbg !59
  %689 = insertelement <8 x float> %688, float %.0.i97, i64 1, !dbg !59
  %690 = insertelement <8 x float> %689, float %.0.i100, i64 2, !dbg !59
  %691 = insertelement <8 x float> %690, float %.0.i103, i64 3, !dbg !59
  %692 = insertelement <8 x float> %691, float %.0.i106, i64 4, !dbg !59
  %693 = insertelement <8 x float> %692, float %.0.i109, i64 5, !dbg !59
  %694 = insertelement <8 x float> %693, float %.0.i112, i64 6, !dbg !59
  %695 = insertelement <8 x float> %694, float %.0.i115, i64 7, !dbg !59
  %696 = fptrunc <8 x float> %695 to <8 x bfloat>, !dbg !59
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230224), i32 %563) #7, !dbg !59
  store <8 x bfloat> %669, ptr addrspace(3) %109, align 16, !dbg !59
  store <8 x bfloat> %678, ptr addrspace(3) %111, align 16, !dbg !59
  store <8 x bfloat> %687, ptr addrspace(3) %119, align 16, !dbg !59
  store <8 x bfloat> %696, ptr addrspace(3) %121, align 16, !dbg !59
  tail call void asm sideeffect "@$1 cp.async.mbarrier.arrive.noinc.shared.b64 [$0];", "r,b"(i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230464) to i32), i1 true) #7, !dbg !59
  tail call void asm sideeffect "@$0 tcgen05.st.sync.aligned.16x32bx2.x32.b32 [$1], 32, {$2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33};", "b,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r"(i1 true, i32 %169, float %629, float %630, float %631, float %632, float %633, float %634, float %635, float %636, float %637, float %638, float %639, float %640, float %641, float %642, float %643, float %644, float %645, float %646, float %647, float %648, float %649, float %650, float %651, float %652, float %653, float %654, float %655, float %656, float %657, float %658, float %659, float %660) #7, !dbg !43
  tail call void asm sideeffect "tcgen05.wait::st.sync.aligned;", ""() #7, !dbg !43
  tail call void asm sideeffect "barrier.sync.aligned 2, 256 ;", ""() #7, !dbg !43
  %697 = add i32 %175, 128, !dbg !44
  %698 = icmp slt i32 %697, %20, !dbg !44
  br i1 %698, label %171, label %._crit_edge293, !dbg !44

._crit_edge293:                                   ; preds = %__nv_exp2f.exit119, %133
  %.lcssa266 = phi float [ 1.000000e+00, %133 ], [ %561, %__nv_exp2f.exit119 ], !dbg !61
  %.lcssa265 = phi float [ 0xFFF0000000000000, %133 ], [ %286, %__nv_exp2f.exit119 ], !dbg !62
  %.lcssa264 = phi i1 [ %134, %133 ], [ %562, %__nv_exp2f.exit119 ], !dbg !63
  %699 = fcmp olt float %.lcssa266, 0x3810000000000000, !dbg !64
  %700 = fmul float %.lcssa266, 0x4160000000000000, !dbg !64
  %.02.i = select i1 %699, float %700, float %.lcssa266, !dbg !64
  %i.i.0.i = select i1 %699, float -2.300000e+01, float 0.000000e+00, !dbg !64
  %701 = bitcast float %.02.i to i32, !dbg !64
  %702 = add i32 %701, -1060439283, !dbg !64
  %703 = and i32 %702, -8388608, !dbg !64
  %704 = sub i32 %701, %703, !dbg !64
  %705 = bitcast i32 %704 to float, !dbg !64
  %706 = sitofp i32 %703 to float, !dbg !64
  %707 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !64
  %.not.i219 = icmp eq i32 %707, 0, !dbg !64
  %708 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %706, float 0x3E80000000000000, float %i.i.0.i) #7, !dbg !64
  %709 = tail call float @llvm.nvvm.fma.rn.f(float %706, float 0x3E80000000000000, float %i.i.0.i) #7, !dbg !64
  %.08.i = select i1 %.not.i219, float %709, float %708, !dbg !64
  %710 = fadd float %705, -1.000000e+00, !dbg !64
  %711 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !64
  %.not1.i = icmp eq i32 %711, 0, !dbg !64
  %712 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3FB8D64FE0000000, float %710, float 0xBFC58FE600000000) #7, !dbg !64
  %713 = tail call float @llvm.nvvm.fma.rn.f(float 0x3FB8D64FE0000000, float %710, float 0xBFC58FE600000000) #7, !dbg !64
  %.010.i = select i1 %.not1.i, float %713, float %712, !dbg !64
  %714 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !64
  %.not2.i = icmp eq i32 %714, 0, !dbg !64
  %715 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %710, float 0x3FC5F9E540000000) #7, !dbg !64
  %716 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %710, float 0x3FC5F9E540000000) #7, !dbg !64
  %.011.i = select i1 %.not2.i, float %716, float %715, !dbg !64
  %717 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !64
  %.not3.i = icmp eq i32 %717, 0, !dbg !64
  %718 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %710, float 0xBFC6E9C860000000) #7, !dbg !64
  %719 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %710, float 0xBFC6E9C860000000) #7, !dbg !64
  %.012.i = select i1 %.not3.i, float %719, float %718, !dbg !64
  %720 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !64
  %.not4.i = icmp eq i32 %720, 0, !dbg !64
  %721 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %710, float 0x3FCA417E80000000) #7, !dbg !64
  %722 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %710, float 0x3FCA417E80000000) #7, !dbg !64
  %.09.i = select i1 %.not4.i, float %722, float %721, !dbg !64
  %723 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !64
  %.not5.i = icmp eq i32 %723, 0, !dbg !64
  %724 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %710, float 0xBFCEC79160000000) #7, !dbg !64
  %725 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %710, float 0xBFCEC79160000000) #7, !dbg !64
  %.05.i = select i1 %.not5.i, float %725, float %724, !dbg !64
  %726 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !64
  %.not6.i = icmp eq i32 %726, 0, !dbg !64
  %727 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %710, float 0x3FD277F320000000) #7, !dbg !64
  %728 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %710, float 0x3FD277F320000000) #7, !dbg !64
  %.01.i = select i1 %.not6.i, float %728, float %727, !dbg !64
  %729 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !64
  %.not7.i = icmp eq i32 %729, 0, !dbg !64
  %730 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %710, float 0xBFD7154920000000) #7, !dbg !64
  %731 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %710, float 0xBFD7154920000000) #7, !dbg !64
  %.0.i220 = select i1 %.not7.i, float %731, float %730, !dbg !64
  %732 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !64
  %.not8.i = icmp eq i32 %732, 0, !dbg !64
  %733 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i220, float %710, float 0x3FDEC70940000000) #7, !dbg !64
  %734 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i220, float %710, float 0x3FDEC70940000000) #7, !dbg !64
  %.07.i = select i1 %.not8.i, float %734, float %733, !dbg !64
  %735 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !64
  %.not9.i = icmp eq i32 %735, 0, !dbg !64
  %736 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %710, float 0xBFE7154760000000) #7, !dbg !64
  %737 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %710, float 0xBFE7154760000000) #7, !dbg !64
  %.06.i = select i1 %.not9.i, float %737, float %736, !dbg !64
  %738 = fmul float %710, %.06.i, !dbg !64
  %739 = fmul float %710, %738, !dbg !64
  %740 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !64
  %.not10.i = icmp eq i32 %740, 0, !dbg !64
  %741 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %710, float 0x3FF7154760000000, float %739) #7, !dbg !64
  %742 = tail call float @llvm.nvvm.fma.rn.f(float %710, float 0x3FF7154760000000, float %739) #7, !dbg !64
  %.04.i = select i1 %.not10.i, float %742, float %741, !dbg !64
  %743 = fadd float %.08.i, %.04.i, !dbg !64
  %744 = icmp ugt i32 %701, 2139095039, !dbg !64
  br i1 %744, label %__nv_fmaf_rn.exit.i.i, label %__nv_log2f.exit, !dbg !64

__nv_fmaf_rn.exit.i.i:                            ; preds = %._crit_edge293
  %745 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !64
  %.not11.i = icmp eq i32 %745, 0, !dbg !64
  %746 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #7, !dbg !64
  %747 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #7, !dbg !64
  %.03.i = select i1 %.not11.i, float %747, float %746, !dbg !64
  br label %__nv_log2f.exit, !dbg !64

__nv_log2f.exit:                                  ; preds = %._crit_edge293, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %743, %._crit_edge293 ], !dbg !64
  %748 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !64
  %r.i.1.i = select i1 %748, float 0xFFF0000000000000, float %r.i.0.i, !dbg !64
  %749 = fadd float %.lcssa265, %r.i.1.i, !dbg !65
  %750 = tail call { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } asm sideeffect "tcgen05.ld.sync.aligned.16x32bx2.x32.b32 {$0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31}, [$32], 32;", "=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,r"(i32 %169) #7, !dbg !43
  %751 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 0, !dbg !43
  %752 = bitcast i32 %751 to float, !dbg !43
  %753 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 1, !dbg !43
  %754 = bitcast i32 %753 to float, !dbg !43
  %755 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 2, !dbg !43
  %756 = bitcast i32 %755 to float, !dbg !43
  %757 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 3, !dbg !43
  %758 = bitcast i32 %757 to float, !dbg !43
  %759 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 4, !dbg !43
  %760 = bitcast i32 %759 to float, !dbg !43
  %761 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 5, !dbg !43
  %762 = bitcast i32 %761 to float, !dbg !43
  %763 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 6, !dbg !43
  %764 = bitcast i32 %763 to float, !dbg !43
  %765 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 7, !dbg !43
  %766 = bitcast i32 %765 to float, !dbg !43
  %767 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 8, !dbg !43
  %768 = bitcast i32 %767 to float, !dbg !43
  %769 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 9, !dbg !43
  %770 = bitcast i32 %769 to float, !dbg !43
  %771 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 10, !dbg !43
  %772 = bitcast i32 %771 to float, !dbg !43
  %773 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 11, !dbg !43
  %774 = bitcast i32 %773 to float, !dbg !43
  %775 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 12, !dbg !43
  %776 = bitcast i32 %775 to float, !dbg !43
  %777 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 13, !dbg !43
  %778 = bitcast i32 %777 to float, !dbg !43
  %779 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 14, !dbg !43
  %780 = bitcast i32 %779 to float, !dbg !43
  %781 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 15, !dbg !43
  %782 = bitcast i32 %781 to float, !dbg !43
  %783 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 16, !dbg !43
  %784 = bitcast i32 %783 to float, !dbg !43
  %785 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 17, !dbg !43
  %786 = bitcast i32 %785 to float, !dbg !43
  %787 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 18, !dbg !43
  %788 = bitcast i32 %787 to float, !dbg !43
  %789 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 19, !dbg !43
  %790 = bitcast i32 %789 to float, !dbg !43
  %791 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 20, !dbg !43
  %792 = bitcast i32 %791 to float, !dbg !43
  %793 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 21, !dbg !43
  %794 = bitcast i32 %793 to float, !dbg !43
  %795 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 22, !dbg !43
  %796 = bitcast i32 %795 to float, !dbg !43
  %797 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 23, !dbg !43
  %798 = bitcast i32 %797 to float, !dbg !43
  %799 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 24, !dbg !43
  %800 = bitcast i32 %799 to float, !dbg !43
  %801 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 25, !dbg !43
  %802 = bitcast i32 %801 to float, !dbg !43
  %803 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 26, !dbg !43
  %804 = bitcast i32 %803 to float, !dbg !43
  %805 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 27, !dbg !43
  %806 = bitcast i32 %805 to float, !dbg !43
  %807 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 28, !dbg !43
  %808 = bitcast i32 %807 to float, !dbg !43
  %809 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 29, !dbg !43
  %810 = bitcast i32 %809 to float, !dbg !43
  %811 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 30, !dbg !43
  %812 = bitcast i32 %811 to float, !dbg !43
  %813 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %750, 31, !dbg !43
  %814 = bitcast i32 %813 to float, !dbg !43
  tail call void asm sideeffect "tcgen05.wait::ld.sync.aligned;", ""() #7, !dbg !43
  %815 = tail call float @llvm.nvvm.div.full(float %752, float %.lcssa266), !dbg !66
  %816 = tail call float @llvm.nvvm.div.full(float %754, float %.lcssa266), !dbg !66
  %817 = tail call float @llvm.nvvm.div.full(float %756, float %.lcssa266), !dbg !66
  %818 = tail call float @llvm.nvvm.div.full(float %758, float %.lcssa266), !dbg !66
  %819 = tail call float @llvm.nvvm.div.full(float %760, float %.lcssa266), !dbg !66
  %820 = tail call float @llvm.nvvm.div.full(float %762, float %.lcssa266), !dbg !66
  %821 = tail call float @llvm.nvvm.div.full(float %764, float %.lcssa266), !dbg !66
  %822 = tail call float @llvm.nvvm.div.full(float %766, float %.lcssa266), !dbg !66
  %823 = tail call float @llvm.nvvm.div.full(float %768, float %.lcssa266), !dbg !66
  %824 = tail call float @llvm.nvvm.div.full(float %770, float %.lcssa266), !dbg !66
  %825 = tail call float @llvm.nvvm.div.full(float %772, float %.lcssa266), !dbg !66
  %826 = tail call float @llvm.nvvm.div.full(float %774, float %.lcssa266), !dbg !66
  %827 = tail call float @llvm.nvvm.div.full(float %776, float %.lcssa266), !dbg !66
  %828 = tail call float @llvm.nvvm.div.full(float %778, float %.lcssa266), !dbg !66
  %829 = tail call float @llvm.nvvm.div.full(float %780, float %.lcssa266), !dbg !66
  %830 = tail call float @llvm.nvvm.div.full(float %782, float %.lcssa266), !dbg !66
  %831 = tail call float @llvm.nvvm.div.full(float %784, float %.lcssa266), !dbg !66
  %832 = tail call float @llvm.nvvm.div.full(float %786, float %.lcssa266), !dbg !66
  %833 = tail call float @llvm.nvvm.div.full(float %788, float %.lcssa266), !dbg !66
  %834 = tail call float @llvm.nvvm.div.full(float %790, float %.lcssa266), !dbg !66
  %835 = tail call float @llvm.nvvm.div.full(float %792, float %.lcssa266), !dbg !66
  %836 = tail call float @llvm.nvvm.div.full(float %794, float %.lcssa266), !dbg !66
  %837 = tail call float @llvm.nvvm.div.full(float %796, float %.lcssa266), !dbg !66
  %838 = tail call float @llvm.nvvm.div.full(float %798, float %.lcssa266), !dbg !66
  %839 = tail call float @llvm.nvvm.div.full(float %800, float %.lcssa266), !dbg !66
  %840 = tail call float @llvm.nvvm.div.full(float %802, float %.lcssa266), !dbg !66
  %841 = tail call float @llvm.nvvm.div.full(float %804, float %.lcssa266), !dbg !66
  %842 = tail call float @llvm.nvvm.div.full(float %806, float %.lcssa266), !dbg !66
  %843 = tail call float @llvm.nvvm.div.full(float %808, float %.lcssa266), !dbg !66
  %844 = tail call float @llvm.nvvm.div.full(float %810, float %.lcssa266), !dbg !66
  %845 = tail call float @llvm.nvvm.div.full(float %812, float %.lcssa266), !dbg !66
  %846 = tail call float @llvm.nvvm.div.full(float %814, float %.lcssa266), !dbg !66
  %847 = mul i32 %137, %20, !dbg !67
  %848 = sext i32 %847 to i64, !dbg !68
  %849 = getelementptr float, ptr addrspace(1) %4, i64 %848, !dbg !68
  %850 = sext i32 %.reass to i64, !dbg !69
  %851 = getelementptr float, ptr addrspace(1) %849, i64 %850, !dbg !69
  tail call void asm sideeffect "barrier.sync.aligned 2, 256 ;", ""() #7, !dbg !70
  %852 = bitcast float %749 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %852, i1 true) #7, !dbg !70
  tail call void asm sideeffect "barrier.sync.aligned 2, 256 ;", ""() #7, !dbg !70
  %853 = load i32, ptr addrspace(3) %126, align 4, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %853, ptr addrspace(1) %851, i1 %128) #7, !dbg !70
  %854 = sdiv i64 %146, %70, !dbg !32
  %855 = trunc i64 %854 to i32, !dbg !71
  %856 = add i32 %150, %855, !dbg !71
  %857 = insertelement <8 x float> poison, float %815, i64 0, !dbg !72
  %858 = insertelement <8 x float> %857, float %816, i64 1, !dbg !72
  %859 = insertelement <8 x float> %858, float %817, i64 2, !dbg !72
  %860 = insertelement <8 x float> %859, float %818, i64 3, !dbg !72
  %861 = insertelement <8 x float> %860, float %819, i64 4, !dbg !72
  %862 = insertelement <8 x float> %861, float %820, i64 5, !dbg !72
  %863 = insertelement <8 x float> %862, float %821, i64 6, !dbg !72
  %864 = insertelement <8 x float> %863, float %822, i64 7, !dbg !72
  %865 = fptrunc <8 x float> %864 to <8 x bfloat>, !dbg !72
  %866 = insertelement <8 x float> poison, float %823, i64 0, !dbg !72
  %867 = insertelement <8 x float> %866, float %824, i64 1, !dbg !72
  %868 = insertelement <8 x float> %867, float %825, i64 2, !dbg !72
  %869 = insertelement <8 x float> %868, float %826, i64 3, !dbg !72
  %870 = insertelement <8 x float> %869, float %827, i64 4, !dbg !72
  %871 = insertelement <8 x float> %870, float %828, i64 5, !dbg !72
  %872 = insertelement <8 x float> %871, float %829, i64 6, !dbg !72
  %873 = insertelement <8 x float> %872, float %830, i64 7, !dbg !72
  %874 = fptrunc <8 x float> %873 to <8 x bfloat>, !dbg !72
  %875 = insertelement <8 x float> poison, float %831, i64 0, !dbg !72
  %876 = insertelement <8 x float> %875, float %832, i64 1, !dbg !72
  %877 = insertelement <8 x float> %876, float %833, i64 2, !dbg !72
  %878 = insertelement <8 x float> %877, float %834, i64 3, !dbg !72
  %879 = insertelement <8 x float> %878, float %835, i64 4, !dbg !72
  %880 = insertelement <8 x float> %879, float %836, i64 5, !dbg !72
  %881 = insertelement <8 x float> %880, float %837, i64 6, !dbg !72
  %882 = insertelement <8 x float> %881, float %838, i64 7, !dbg !72
  %883 = fptrunc <8 x float> %882 to <8 x bfloat>, !dbg !72
  %884 = insertelement <8 x float> poison, float %839, i64 0, !dbg !72
  %885 = insertelement <8 x float> %884, float %840, i64 1, !dbg !72
  %886 = insertelement <8 x float> %885, float %841, i64 2, !dbg !72
  %887 = insertelement <8 x float> %886, float %842, i64 3, !dbg !72
  %888 = insertelement <8 x float> %887, float %843, i64 4, !dbg !72
  %889 = insertelement <8 x float> %888, float %844, i64 5, !dbg !72
  %890 = insertelement <8 x float> %889, float %845, i64 6, !dbg !72
  %891 = insertelement <8 x float> %890, float %846, i64 7, !dbg !72
  %892 = fptrunc <8 x float> %891 to <8 x bfloat>, !dbg !72
  tail call void asm sideeffect "barrier.sync.aligned 2, 256 ;", ""() #7, !dbg !73
  store <8 x bfloat> %865, ptr addrspace(3) %129, align 16, !dbg !73
  store <8 x bfloat> %874, ptr addrspace(3) %130, align 16, !dbg !73
  store <8 x bfloat> %883, ptr addrspace(3) %131, align 16, !dbg !73
  store <8 x bfloat> %892, ptr addrspace(3) %132, align 16, !dbg !73
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #7, !dbg !73
  tail call void asm sideeffect "barrier.sync.aligned 2, 256 ;", ""() #7, !dbg !73
  %893 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !73
  %894 = extractvalue { i32, i1 } %893, 1, !dbg !73
  %895 = and i1 %80, %894, !dbg !73
  %896 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 212992), i32 %158, !dbg !73
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %895, ptr addrspace(1) %63, i32 %160, i32 %856, ptr addrspace(3) %896) #7, !dbg !73
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !73
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !73
  tail call void asm sideeffect "barrier.sync.aligned 2, 256 ;", ""() #7, !dbg !73
  %897 = add i32 %136, %37, !dbg !74
  %898 = add nuw nsw i32 %135, 1, !dbg !33
  %exitcond322.not = icmp eq i32 %898, %44, !dbg !33
  br i1 %exitcond322.not, label %._crit_edge299, label %133, !dbg !33

._crit_edge299:                                   ; preds = %__nv_log2f.exit, %31
  tail call void asm sideeffect "barrier.sync 1 ;", ""() #7, !dbg !8
  tail call void @llvm.nvvm.setmaxnreg.dec.sync.aligned.u32(i32 24), !dbg !8
  br label %.preheader.backedge, !dbg !8

899:                                              ; preds = %.preheader
  tail call void @llvm.nvvm.setmaxnreg.inc.sync.aligned.u32(i32 32), !dbg !8
  %900 = load ptr addrspace(3), ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229376), align 16, !dbg !8
  %901 = load ptr addrspace(3), ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229392), align 16, !dbg !8
  tail call void asm sideeffect "barrier.sync 1 ;", ""() #7, !dbg !8
  %902 = add i32 %20, 127, !dbg !10
  %903 = sdiv i32 %902, 128, !dbg !14
  %904 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !15
  %905 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x(), !dbg !16
  %906 = mul i32 %19, %18, !dbg !17
  %907 = mul i32 %906, %903, !dbg !18
  %.frozen370 = freeze i32 %907, !dbg !19
  %908 = sdiv i32 %.frozen370, %905, !dbg !19
  %909 = mul i32 %908, %905, !dbg !20
  %.decomposed371 = sub i32 %.frozen370, %909, !dbg !20
  %910 = icmp slt i32 %904, %.decomposed371, !dbg !21
  %911 = zext i1 %910 to i32, !dbg !22
  %912 = add i32 %908, %911, !dbg !22
  %913 = icmp sgt i32 %912, 0, !dbg !33
  br i1 %913, label %.lr.ph289, label %._crit_edge290, !dbg !33

.lr.ph289:                                        ; preds = %899
  %914 = ptrtoint ptr addrspace(3) %901 to i32
  %915 = ptrtoint ptr addrspace(3) %900 to i32
  %916 = icmp sgt i32 %20, 0
  %917 = add i32 %23, -512
  %918 = lshr i32 %917, 5
  %919 = lshr exact i64 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072) to i64), 4
  %920 = and i64 %919, 16383
  %921 = or disjoint i64 %920, 4611686293338849280
  %922 = add nuw nsw i64 %920, 4611686293338849282
  %923 = add nuw nsw i64 %920, 4611686293338849284
  %924 = add nuw nsw i64 %920, 4611686293338849286
  %925 = add nuw nsw i64 %920, 4611686293338849792
  %926 = add nuw nsw i64 %920, 4611686293338849794
  %927 = add nuw nsw i64 %920, 4611686293338849796
  %928 = add nuw nsw i64 %920, 4611686293338849798
  %929 = lshr exact i64 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 147456) to i64), 4
  %930 = and i64 %929, 16383
  %931 = or disjoint i64 %930, 4611686293338849280
  %932 = add nuw nsw i64 %930, 4611686293338849282
  %933 = add nuw nsw i64 %930, 4611686293338849284
  %934 = add nuw nsw i64 %930, 4611686293338849286
  %935 = add nuw nsw i64 %930, 4611686293338849792
  %936 = add nuw nsw i64 %930, 4611686293338849794
  %937 = add nuw nsw i64 %930, 4611686293338849796
  %938 = add nuw nsw i64 %930, 4611686293338849798
  br label %939, !dbg !33

939:                                              ; preds = %.lr.ph289, %._crit_edge286
  %940 = phi i64 [ 0, %.lr.ph289 ], [ %.lcssa263, %._crit_edge286 ]
  %941 = phi i32 [ 0, %.lr.ph289 ], [ %978, %._crit_edge286 ]
  %942 = and i32 %941, 1, !dbg !8
  %943 = sub nsw i32 0, %942, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 3, 32 ;", ""() #7, !dbg !8
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230336), i32 %943) #7, !dbg !8
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230320), i32 %943) #7, !dbg !8
  br i1 %916, label %.lr.ph285, label %._crit_edge286, !dbg !44

.lr.ph285:                                        ; preds = %939, %972
  %944 = phi i64 [ %975, %972 ], [ %940, %939 ]
  %945 = phi i32 [ %976, %972 ], [ 0, %939 ]
  %946 = trunc i64 %944 to i32, !dbg !75
  %947 = and i32 %946, 1, !dbg !75
  %948 = getelementptr i64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230160), i32 %947, !dbg !8
  %949 = shl i64 %944, 62, !dbg !8
  %sext19 = ashr i64 %949, 63, !dbg !8
  %950 = trunc nsw i64 %sext19 to i32, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 3, 32 ;", ""() #7, !dbg !8
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) %948, i32 %950) #7, !dbg !8
  %951 = xor i32 %947, 1, !dbg !76
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230384), i32 %951) #7, !dbg !76
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #7, !dbg !76
  %952 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %918, i32 0, i32 31), !dbg !76
  %953 = icmp eq i32 %952, 0, !dbg !76
  br i1 %953, label %954, label %.critedge, !dbg !76

954:                                              ; preds = %.lr.ph285
  %.idx20 = shl nuw nsw i32 %947, 15, !dbg !8
  %955 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx20, !dbg !8
  %956 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !76
  %957 = extractvalue { i32, i1 } %956, 1, !dbg !76
  %958 = ptrtoint ptr addrspace(3) %955 to i32, !dbg !76
  %959 = lshr exact i32 %958, 4, !dbg !76
  %960 = and i32 %959, 16383, !dbg !76
  %961 = zext nneg i32 %960 to i64, !dbg !76
  %962 = or disjoint i64 %961, 4611686293372403712, !dbg !76
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %914, i64 %921, i64 %962, i32 69207184, i1 false, i1 %957) #7, !dbg !76
  %963 = add nuw nsw i64 %961, 4611686293372403714, !dbg !76
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %914, i64 %922, i64 %963, i32 69207184, i1 true, i1 %957) #7, !dbg !76
  %964 = add nuw nsw i64 %961, 4611686293372403716, !dbg !76
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %914, i64 %923, i64 %964, i32 69207184, i1 true, i1 %957) #7, !dbg !76
  %965 = add nuw nsw i64 %961, 4611686293372403718, !dbg !76
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %914, i64 %924, i64 %965, i32 69207184, i1 true, i1 %957) #7, !dbg !76
  %966 = add nuw nsw i64 %961, 4611686293372404736, !dbg !76
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %914, i64 %925, i64 %966, i32 69207184, i1 true, i1 %957) #7, !dbg !76
  %967 = add nuw nsw i64 %961, 4611686293372404738, !dbg !76
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %914, i64 %926, i64 %967, i32 69207184, i1 true, i1 %957) #7, !dbg !76
  %968 = add nuw nsw i64 %961, 4611686293372404740, !dbg !76
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %914, i64 %927, i64 %968, i32 69207184, i1 true, i1 %957) #7, !dbg !76
  %969 = add nuw nsw i64 %961, 4611686293372404742, !dbg !76
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %914, i64 %928, i64 %969, i32 69207184, i1 true, i1 %957) #7, !dbg !76
  tail call void asm sideeffect "@$0 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [$1];", "b,l"(i1 %957, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230304)) #7, !dbg !76
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230400), i32 %951) #7, !dbg !45
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #7, !dbg !45
  %970 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !45
  %971 = extractvalue { i32, i1 } %970, 1, !dbg !45
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %915, i64 %931, i64 %962, i32 69207184, i1 false, i1 %971) #7, !dbg !45
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %915, i64 %932, i64 %963, i32 69207184, i1 true, i1 %971) #7, !dbg !45
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %915, i64 %933, i64 %964, i32 69207184, i1 true, i1 %971) #7, !dbg !45
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %915, i64 %934, i64 %965, i32 69207184, i1 true, i1 %971) #7, !dbg !45
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %915, i64 %935, i64 %966, i32 69207184, i1 true, i1 %971) #7, !dbg !45
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %915, i64 %936, i64 %967, i32 69207184, i1 true, i1 %971) #7, !dbg !45
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %915, i64 %937, i64 %968, i32 69207184, i1 true, i1 %971) #7, !dbg !45
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %915, i64 %938, i64 %969, i32 69207184, i1 true, i1 %971) #7, !dbg !45
  tail call void asm sideeffect "@$0 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [$1];", "b,l"(i1 %971, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230288)) #7, !dbg !45
  br label %972, !dbg !45

.critedge:                                        ; preds = %.lr.ph285
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230400), i32 %951) #7, !dbg !45
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #7, !dbg !45
  br label %972, !dbg !45

972:                                              ; preds = %.critedge, %954
  %973 = getelementptr i64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230176), i32 %947, !dbg !8
  %974 = ptrtoint ptr addrspace(3) %973 to i32, !dbg !45
  tail call void asm sideeffect "@$1 mbarrier.arrive.shared.b64 _, [$0];", "r,b"(i32 %974, i1 true) #7, !dbg !45
  %975 = add i64 %944, 1, !dbg !44
  %976 = add i32 %945, 128, !dbg !44
  %977 = icmp slt i32 %976, %20, !dbg !44
  br i1 %977, label %.lr.ph285, label %._crit_edge286, !dbg !44

._crit_edge286:                                   ; preds = %972, %939
  %.lcssa263 = phi i64 [ %940, %939 ], [ %975, %972 ], !dbg !77
  tail call void asm sideeffect "@$1 mbarrier.arrive.shared.b64 _, [$0];", "r,b"(i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230368) to i32), i1 true) #7, !dbg !44
  tail call void asm sideeffect "@$1 mbarrier.arrive.shared.b64 _, [$0];", "r,b"(i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230352) to i32), i1 true) #7, !dbg !44
  %978 = add nuw nsw i32 %941, 1, !dbg !33
  %exitcond321.not = icmp eq i32 %978, %912, !dbg !33
  br i1 %exitcond321.not, label %._crit_edge290, label %939, !dbg !33

._crit_edge290:                                   ; preds = %._crit_edge286, %899
  tail call void asm sideeffect "barrier.sync 1 ;", ""() #7, !dbg !8
  tail call void @llvm.nvvm.setmaxnreg.dec.sync.aligned.u32(i32 24), !dbg !8
  br label %.preheader.backedge, !dbg !8

979:                                              ; preds = %.preheader
  tail call void @llvm.nvvm.setmaxnreg.inc.sync.aligned.u32(i32 32), !dbg !8
  %980 = load ptr addrspace(3), ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229384), align 8, !dbg !8
  %981 = load ptr addrspace(3), ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229400), align 8, !dbg !8
  tail call void asm sideeffect "barrier.sync 1 ;", ""() #7, !dbg !8
  %982 = add i32 %20, 127, !dbg !10
  %983 = sdiv i32 %982, 128, !dbg !14
  %984 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !15
  %985 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x(), !dbg !16
  %986 = mul i32 %19, %18, !dbg !17
  %987 = mul i32 %986, %983, !dbg !18
  %.frozen372 = freeze i32 %987, !dbg !19
  %988 = sdiv i32 %.frozen372, %985, !dbg !19
  %989 = mul i32 %988, %985, !dbg !20
  %.decomposed373 = sub i32 %.frozen372, %989, !dbg !20
  %990 = icmp slt i32 %984, %.decomposed373, !dbg !21
  %991 = zext i1 %990 to i32, !dbg !22
  %992 = add i32 %988, %991, !dbg !22
  %993 = icmp sgt i32 %992, 0, !dbg !33
  br i1 %993, label %.lr.ph282, label %._crit_edge283, !dbg !33

.lr.ph282:                                        ; preds = %979
  %994 = ptrtoint ptr addrspace(3) %981 to i32
  %995 = ptrtoint ptr addrspace(3) %980 to i32
  %996 = icmp sgt i32 %20, 0
  %997 = add i32 %23, -544
  %998 = lshr i32 %997, 5
  %999 = lshr exact i64 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 163840) to i64), 4
  %1000 = and i64 %999, 16383
  %1001 = or disjoint i64 %1000, 4611686293338849280
  %1002 = add nuw nsw i64 %1000, 4611686293338849282
  %1003 = add nuw nsw i64 %1000, 4611686293338849284
  %1004 = add nuw nsw i64 %1000, 4611686293338849286
  %1005 = add nuw nsw i64 %1000, 4611686293338849792
  %1006 = add nuw nsw i64 %1000, 4611686293338849794
  %1007 = add nuw nsw i64 %1000, 4611686293338849796
  %1008 = add nuw nsw i64 %1000, 4611686293338849798
  %1009 = lshr exact i64 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 180224) to i64), 4
  %1010 = and i64 %1009, 16383
  %1011 = or disjoint i64 %1010, 4611686293338849280
  %1012 = add nuw nsw i64 %1010, 4611686293338849282
  %1013 = add nuw nsw i64 %1010, 4611686293338849284
  %1014 = add nuw nsw i64 %1010, 4611686293338849286
  %1015 = add nuw nsw i64 %1010, 4611686293338849792
  %1016 = add nuw nsw i64 %1010, 4611686293338849794
  %1017 = add nuw nsw i64 %1010, 4611686293338849796
  %1018 = add nuw nsw i64 %1010, 4611686293338849798
  br label %1019, !dbg !33

1019:                                             ; preds = %.lr.ph282, %._crit_edge279
  %1020 = phi i64 [ 0, %.lr.ph282 ], [ %.lcssa262, %._crit_edge279 ]
  %1021 = phi i32 [ 0, %.lr.ph282 ], [ %1055, %._crit_edge279 ]
  br i1 %996, label %.lr.ph278, label %._crit_edge279, !dbg !44

.lr.ph278:                                        ; preds = %1019, %1049
  %1022 = phi i64 [ %1052, %1049 ], [ %1020, %1019 ]
  %1023 = phi i32 [ %1053, %1049 ], [ 0, %1019 ]
  %1024 = trunc i64 %1022 to i32, !dbg !78
  %1025 = and i32 %1024, 1, !dbg !79
  %1026 = getelementptr i64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230144), i32 %1025, !dbg !8
  %1027 = shl i64 %1022, 62, !dbg !8
  %sext = ashr i64 %1027, 63, !dbg !8
  %1028 = trunc nsw i64 %sext to i32, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 4, 32 ;", ""() #7, !dbg !8
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) %1026, i32 %1028) #7, !dbg !8
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230432), i32 %1025) #7, !dbg !78
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #7, !dbg !78
  %1029 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %998, i32 0, i32 31), !dbg !78
  %1030 = icmp eq i32 %1029, 0, !dbg !78
  br i1 %1030, label %1031, label %.critedge2, !dbg !78

1031:                                             ; preds = %.lr.ph278
  %.idx17 = shl nuw nsw i32 %1025, 15, !dbg !8
  %1032 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %.idx17, !dbg !8
  %1033 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !78
  %1034 = extractvalue { i32, i1 } %1033, 1, !dbg !78
  %1035 = ptrtoint ptr addrspace(3) %1032 to i32, !dbg !78
  %1036 = lshr exact i32 %1035, 4, !dbg !78
  %1037 = and i32 %1036, 16383, !dbg !78
  %1038 = zext nneg i32 %1037 to i64, !dbg !78
  %1039 = or disjoint i64 %1038, 4611686293372403712, !dbg !78
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %994, i64 %1001, i64 %1039, i32 69272720, i1 true, i1 %1034) #7, !dbg !78
  %1040 = add nuw nsw i64 %1038, 4611686293372403840, !dbg !78
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %994, i64 %1002, i64 %1040, i32 69272720, i1 true, i1 %1034) #7, !dbg !78
  %1041 = add nuw nsw i64 %1038, 4611686293372403968, !dbg !78
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %994, i64 %1003, i64 %1041, i32 69272720, i1 true, i1 %1034) #7, !dbg !78
  %1042 = add nuw nsw i64 %1038, 4611686293372404096, !dbg !78
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %994, i64 %1004, i64 %1042, i32 69272720, i1 true, i1 %1034) #7, !dbg !78
  %1043 = add nuw nsw i64 %1038, 4611686293372404224, !dbg !78
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %994, i64 %1005, i64 %1043, i32 69272720, i1 true, i1 %1034) #7, !dbg !78
  %1044 = add nuw nsw i64 %1038, 4611686293372404352, !dbg !78
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %994, i64 %1006, i64 %1044, i32 69272720, i1 true, i1 %1034) #7, !dbg !78
  %1045 = add nuw nsw i64 %1038, 4611686293372404480, !dbg !78
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %994, i64 %1007, i64 %1045, i32 69272720, i1 true, i1 %1034) #7, !dbg !78
  %1046 = add nuw nsw i64 %1038, 4611686293372404608, !dbg !78
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %994, i64 %1008, i64 %1046, i32 69272720, i1 true, i1 %1034) #7, !dbg !78
  tail call void asm sideeffect "@$0 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [$1];", "b,l"(i1 %1034, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230256)) #7, !dbg !78
  tail call void asm sideeffect "@$0 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [$1];", "b,l"(i1 %1034, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230272)) #7, !dbg !78
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230464), i32 %1025) #7, !dbg !43
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #7, !dbg !43
  %1047 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !43
  %1048 = extractvalue { i32, i1 } %1047, 1, !dbg !43
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %995, i64 %1011, i64 %1039, i32 69272720, i1 true, i1 %1048) #7, !dbg !43
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %995, i64 %1012, i64 %1040, i32 69272720, i1 true, i1 %1048) #7, !dbg !43
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %995, i64 %1013, i64 %1041, i32 69272720, i1 true, i1 %1048) #7, !dbg !43
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %995, i64 %1014, i64 %1042, i32 69272720, i1 true, i1 %1048) #7, !dbg !43
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %995, i64 %1015, i64 %1043, i32 69272720, i1 true, i1 %1048) #7, !dbg !43
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %995, i64 %1016, i64 %1044, i32 69272720, i1 true, i1 %1048) #7, !dbg !43
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %995, i64 %1017, i64 %1045, i32 69272720, i1 true, i1 %1048) #7, !dbg !43
  tail call void asm sideeffect "@$5 tcgen05.mma.cta_group::1.kind::f16 [ $0 + 0 ], $1, $2, $3, $4;", "r,l,l,r,b,b"(i32 %995, i64 %1018, i64 %1046, i32 69272720, i1 true, i1 %1048) #7, !dbg !43
  tail call void asm sideeffect "@$0 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [$1];", "b,l"(i1 %1048, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230224)) #7, !dbg !43
  tail call void asm sideeffect "@$0 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [$1];", "b,l"(i1 %1048, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230240)) #7, !dbg !43
  br label %1049, !dbg !43

.critedge2:                                       ; preds = %.lr.ph278
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230464), i32 %1025) #7, !dbg !43
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #7, !dbg !43
  br label %1049, !dbg !43

1049:                                             ; preds = %.critedge2, %1031
  %1050 = getelementptr i64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230192), i32 %1025, !dbg !8
  %1051 = ptrtoint ptr addrspace(3) %1050 to i32, !dbg !43
  tail call void asm sideeffect "@$1 mbarrier.arrive.shared.b64 _, [$0];", "r,b"(i32 %1051, i1 true) #7, !dbg !43
  %1052 = add i64 %1022, 1, !dbg !44
  %1053 = add i32 %1023, 128, !dbg !44
  %1054 = icmp slt i32 %1053, %20, !dbg !44
  br i1 %1054, label %.lr.ph278, label %._crit_edge279, !dbg !44

._crit_edge279:                                   ; preds = %1049, %1019
  %.lcssa262 = phi i64 [ %1020, %1019 ], [ %1052, %1049 ], !dbg !80
  %1055 = add nuw nsw i32 %1021, 1, !dbg !33
  %exitcond320.not = icmp eq i32 %1055, %992, !dbg !33
  br i1 %exitcond320.not, label %._crit_edge283, label %1019, !dbg !33

._crit_edge283:                                   ; preds = %._crit_edge279, %979
  tail call void asm sideeffect "barrier.sync 1 ;", ""() #7, !dbg !8
  tail call void @llvm.nvvm.setmaxnreg.dec.sync.aligned.u32(i32 24), !dbg !8
  br label %.preheader.backedge, !dbg !8

1056:                                             ; preds = %.preheader
  tail call void @llvm.nvvm.setmaxnreg.inc.sync.aligned.u32(i32 32), !dbg !8
  tail call void asm sideeffect "barrier.sync 1 ;", ""() #7, !dbg !8
  %1057 = add i32 %20, 127, !dbg !10
  %1058 = sdiv i32 %1057, 128, !dbg !14
  %1059 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !15
  %1060 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x(), !dbg !16
  %1061 = mul i32 %19, %18, !dbg !17
  %1062 = mul i32 %1061, %1058, !dbg !18
  %.frozen374 = freeze i32 %1062, !dbg !19
  %1063 = sdiv i32 %.frozen374, %1060, !dbg !19
  %1064 = mul i32 %1063, %1060, !dbg !20
  %.decomposed375 = sub i32 %.frozen374, %1064, !dbg !20
  %1065 = icmp slt i32 %1059, %.decomposed375, !dbg !21
  %1066 = zext i1 %1065 to i32, !dbg !22
  %1067 = add i32 %1063, %1066, !dbg !22
  %1068 = mul i32 %1061, %20, !dbg !23
  %1069 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !81
  %1070 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.z(), !dbg !81
  %1071 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.y(), !dbg !81
  %1072 = mul i32 %1070, %1071, !dbg !81
  %1073 = add i32 %1072, %1069, !dbg !81
  %1074 = mul i32 %1073, %1060, !dbg !81
  %1075 = add i32 %1074, %1059, !dbg !81
  %1076 = mul i32 %1075, 768, !dbg !81
  %1077 = add i32 %1076, 512, !dbg !81
  %1078 = sext i32 %1077 to i64, !dbg !81
  %1079 = getelementptr i8, ptr addrspace(1) %21, i64 %1078, !dbg !81
  %1080 = add i32 %23, -576, !dbg !81
  %1081 = icmp slt i32 %1080, 32, !dbg !81
  %1082 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229888), i32 %1080, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1082, <1 x i32> zeroinitializer, i1 %1081) #7, !dbg !81
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !81
  %1083 = icmp eq i32 %1080, 0, !dbg !81
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229888), ptr addrspace(1) %1, i1 %1083) #7, !dbg !81
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229888), i1 %1083) #7, !dbg !81
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229888), i32 64, i1 %1083) #7, !dbg !81
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229888), i32 128, i1 %1083) #7, !dbg !81
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229888), i32 128, i1 %1083) #7, !dbg !81
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229888), i32 %1068, i1 %1083) #7, !dbg !81
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229888), i64 256, i1 %1083) #7, !dbg !81
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229888), i32 1, i1 %1083) #7, !dbg !81
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229888), i32 1, i1 %1083) #7, !dbg !81
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0xa;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229888), i1 %1083) #7, !dbg !81
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229888), i1 %1083) #7, !dbg !81
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x3;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229888), i1 %1083) #7, !dbg !81
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229888), i1 %1083) #7, !dbg !81
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %1079, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229888), i1 %1081) #7, !dbg !81
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %1079, i1 %1081) #7, !dbg !81
  tail call void asm sideeffect "barrier.sync.aligned 5, 32 ;", ""() #7, !dbg !81
  %1084 = sext i32 %6 to i64, !dbg !82
  %1085 = sext i32 %7 to i64, !dbg !26
  %1086 = sext i32 %11 to i64, !dbg !83
  %1087 = icmp sgt i32 %1067, 0, !dbg !33
  br i1 %1087, label %.lr.ph275, label %._crit_edge276, !dbg !33

.lr.ph275:                                        ; preds = %1056
  %1088 = icmp sgt i32 %20, 0
  %1089 = icmp ult i32 %1080, 32
  br label %1090, !dbg !33

1090:                                             ; preds = %.lr.ph275, %._crit_edge272
  %1091 = phi i64 [ 0, %.lr.ph275 ], [ %.lcssa261, %._crit_edge272 ]
  %1092 = phi i32 [ %1059, %.lr.ph275 ], [ %1122, %._crit_edge272 ]
  %1093 = phi i32 [ 0, %.lr.ph275 ], [ %1123, %._crit_edge272 ]
  br i1 %1088, label %.lr.ph271, label %._crit_edge272, !dbg !44

.lr.ph271:                                        ; preds = %1090
  %1094 = sdiv i32 %1092, %1058, !dbg !34
  %.frozen376 = freeze i32 %1094, !dbg !36
  %.frozen377 = freeze i32 %19, !dbg !36
  %1095 = sdiv i32 %.frozen376, %.frozen377, !dbg !36
  %1096 = mul i32 %1095, %.frozen377, !dbg !37
  %.decomposed378 = sub i32 %.frozen376, %1096, !dbg !37
  %1097 = sext i32 %.decomposed378 to i64, !dbg !38
  %1098 = mul nsw i64 %1097, %1085, !dbg !26
  %1099 = sext i32 %1095 to i64, !dbg !84
  %1100 = mul nsw i64 %1099, %1084, !dbg !82
  %1101 = add i64 %1098, %1100, !dbg !39
  %1102 = sdiv i64 %1101, %1086
  %1103 = trunc i64 %1102 to i32
  br label %1104, !dbg !44

1104:                                             ; preds = %.lr.ph271, %1104
  %1105 = phi i64 [ %1091, %.lr.ph271 ], [ %1119, %1104 ]
  %1106 = phi i32 [ 0, %.lr.ph271 ], [ %1120, %1104 ]
  %1107 = add i32 %1106, %1103, !dbg !85
  %1108 = trunc i64 %1105 to i32, !dbg !75
  %1109 = and i32 %1108, 1, !dbg !75
  %1110 = and i64 %1105, 2, !dbg !75
  %.not15 = icmp eq i64 %1110, 0, !dbg !75
  %1111 = getelementptr i64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230176), i32 %1109, !dbg !8
  %1112 = zext i1 %.not15 to i32, !dbg !75
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) %1111, i32 %1112) #7, !dbg !75
  %1113 = getelementptr i64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230160), i32 %1109, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 5, 32 ;", ""() #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 32768;", "b,r"(i1 %1083, ptr addrspace(3) %1113) #7, !dbg !8
  %.idx16 = shl nuw nsw i32 %1109, 15, !dbg !8
  %1114 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx16, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 5, 32 ;", ""() #7, !dbg !8
  %1115 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !8
  %1116 = extractvalue { i32, i1 } %1115, 1, !dbg !8
  %1117 = and i1 %1089, %1116, !dbg !8
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %1117, ptr addrspace(3) %1114, ptr addrspace(1) %1079, i32 0, i32 %1107, ptr addrspace(3) %1113) #7, !dbg !8
  %1118 = getelementptr i8, ptr addrspace(3) %1114, i32 16384, !dbg !8
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %1117, ptr addrspace(3) %1118, ptr addrspace(1) %1079, i32 64, i32 %1107, ptr addrspace(3) %1113) #7, !dbg !8
  %1119 = add i64 %1105, 1, !dbg !44
  %1120 = add i32 %1106, 128, !dbg !44
  %1121 = icmp slt i32 %1120, %20, !dbg !44
  br i1 %1121, label %1104, label %._crit_edge272, !dbg !44

._crit_edge272:                                   ; preds = %1104, %1090
  %.lcssa261 = phi i64 [ %1091, %1090 ], [ %1119, %1104 ], !dbg !86
  %1122 = add i32 %1092, %1060, !dbg !74
  %1123 = add nuw nsw i32 %1093, 1, !dbg !33
  %exitcond319.not = icmp eq i32 %1123, %1067, !dbg !33
  br i1 %exitcond319.not, label %._crit_edge276, label %1090, !dbg !33

._crit_edge276:                                   ; preds = %._crit_edge272, %1056
  tail call void asm sideeffect "barrier.sync 1 ;", ""() #7, !dbg !8
  tail call void @llvm.nvvm.setmaxnreg.dec.sync.aligned.u32(i32 24), !dbg !8
  br label %.preheader.backedge, !dbg !8

1124:                                             ; preds = %.preheader
  tail call void @llvm.nvvm.setmaxnreg.inc.sync.aligned.u32(i32 32), !dbg !8
  tail call void asm sideeffect "barrier.sync 1 ;", ""() #7, !dbg !8
  %1125 = add i32 %20, 127, !dbg !10
  %1126 = sdiv i32 %1125, 128, !dbg !14
  %1127 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !15
  %1128 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x(), !dbg !16
  %1129 = mul i32 %19, %18, !dbg !17
  %1130 = mul i32 %1129, %1126, !dbg !18
  %.frozen379 = freeze i32 %1130, !dbg !19
  %1131 = sdiv i32 %.frozen379, %1128, !dbg !19
  %1132 = mul i32 %1131, %1128, !dbg !20
  %.decomposed380 = sub i32 %.frozen379, %1132, !dbg !20
  %1133 = icmp slt i32 %1127, %.decomposed380, !dbg !21
  %1134 = zext i1 %1133 to i32, !dbg !22
  %1135 = add i32 %1131, %1134, !dbg !22
  %1136 = mul i32 %1129, %20, !dbg !23
  %1137 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !87
  %1138 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.z(), !dbg !87
  %1139 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.y(), !dbg !87
  %1140 = mul i32 %1138, %1139, !dbg !87
  %1141 = add i32 %1140, %1137, !dbg !87
  %1142 = mul i32 %1141, %1128, !dbg !87
  %1143 = add i32 %1142, %1127, !dbg !87
  %1144 = mul i32 %1143, 768, !dbg !87
  %1145 = add i32 %1144, 640, !dbg !87
  %1146 = sext i32 %1145 to i64, !dbg !87
  %1147 = getelementptr i8, ptr addrspace(1) %21, i64 %1146, !dbg !87
  %1148 = add i32 %23, -608, !dbg !87
  %1149 = icmp slt i32 %1148, 32, !dbg !87
  %1150 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230016), i32 %1148, !dbg !87
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1150, <1 x i32> zeroinitializer, i1 %1149) #7, !dbg !87
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !87
  %1151 = icmp eq i32 %1148, 0, !dbg !87
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230016), ptr addrspace(1) %2, i1 %1151) #7, !dbg !87
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230016), i1 %1151) #7, !dbg !87
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230016), i32 64, i1 %1151) #7, !dbg !87
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230016), i32 128, i1 %1151) #7, !dbg !87
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230016), i32 128, i1 %1151) #7, !dbg !87
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230016), i32 %1136, i1 %1151) #7, !dbg !87
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230016), i64 256, i1 %1151) #7, !dbg !87
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230016), i32 1, i1 %1151) #7, !dbg !87
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230016), i32 1, i1 %1151) #7, !dbg !87
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0xa;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230016), i1 %1151) #7, !dbg !87
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230016), i1 %1151) #7, !dbg !87
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x3;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230016), i1 %1151) #7, !dbg !87
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230016), i1 %1151) #7, !dbg !87
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %1147, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230016), i1 %1149) #7, !dbg !87
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %1147, i1 %1149) #7, !dbg !87
  tail call void asm sideeffect "barrier.sync.aligned 6, 32 ;", ""() #7, !dbg !87
  %1152 = sext i32 %6 to i64, !dbg !82
  %1153 = sext i32 %7 to i64, !dbg !26
  %1154 = sext i32 %14 to i64, !dbg !88
  %1155 = icmp sgt i32 %1135, 0, !dbg !33
  br i1 %1155, label %.lr.ph268, label %._crit_edge269, !dbg !33

.lr.ph268:                                        ; preds = %1124
  %1156 = icmp sgt i32 %20, 0
  %1157 = icmp ult i32 %1148, 32
  br label %1158, !dbg !33

1158:                                             ; preds = %.lr.ph268, %._crit_edge
  %1159 = phi i64 [ 0, %.lr.ph268 ], [ %.lcssa260, %._crit_edge ]
  %1160 = phi i32 [ %1127, %.lr.ph268 ], [ %1190, %._crit_edge ]
  %1161 = phi i32 [ 0, %.lr.ph268 ], [ %1191, %._crit_edge ]
  br i1 %1156, label %.lr.ph, label %._crit_edge, !dbg !44

.lr.ph:                                           ; preds = %1158
  %1162 = sdiv i32 %1160, %1126, !dbg !34
  %.frozen381 = freeze i32 %1162, !dbg !36
  %.frozen382 = freeze i32 %19, !dbg !36
  %1163 = sdiv i32 %.frozen381, %.frozen382, !dbg !36
  %1164 = mul i32 %1163, %.frozen382, !dbg !37
  %.decomposed383 = sub i32 %.frozen381, %1164, !dbg !37
  %1165 = sext i32 %.decomposed383 to i64, !dbg !38
  %1166 = mul nsw i64 %1165, %1153, !dbg !26
  %1167 = sext i32 %1163 to i64, !dbg !84
  %1168 = mul nsw i64 %1167, %1152, !dbg !82
  %1169 = add i64 %1166, %1168, !dbg !39
  %1170 = sdiv i64 %1169, %1154
  %1171 = trunc i64 %1170 to i32
  br label %1172, !dbg !44

1172:                                             ; preds = %.lr.ph, %1172
  %1173 = phi i64 [ %1159, %.lr.ph ], [ %1187, %1172 ]
  %1174 = phi i32 [ 0, %.lr.ph ], [ %1188, %1172 ]
  %1175 = add i32 %1174, %1171, !dbg !89
  %1176 = trunc i64 %1173 to i32, !dbg !79
  %1177 = and i32 %1176, 1, !dbg !79
  %1178 = and i64 %1173, 2, !dbg !79
  %.not = icmp eq i64 %1178, 0, !dbg !79
  %1179 = getelementptr i64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230192), i32 %1177, !dbg !8
  %1180 = zext i1 %.not to i32, !dbg !79
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) %1179, i32 %1180) #7, !dbg !79
  %1181 = getelementptr i64, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230144), i32 %1177, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 6, 32 ;", ""() #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 32768;", "b,r"(i1 %1151, ptr addrspace(3) %1181) #7, !dbg !8
  %.idx = shl nuw nsw i32 %1177, 15, !dbg !8
  %1182 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 65536), i32 %.idx, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 6, 32 ;", ""() #7, !dbg !8
  %1183 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !8
  %1184 = extractvalue { i32, i1 } %1183, 1, !dbg !8
  %1185 = and i1 %1157, %1184, !dbg !8
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %1185, ptr addrspace(3) %1182, ptr addrspace(1) %1147, i32 0, i32 %1175, ptr addrspace(3) %1181) #7, !dbg !8
  %1186 = getelementptr i8, ptr addrspace(3) %1182, i32 16384, !dbg !8
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %1185, ptr addrspace(3) %1186, ptr addrspace(1) %1147, i32 64, i32 %1175, ptr addrspace(3) %1181) #7, !dbg !8
  %1187 = add i64 %1173, 1, !dbg !44
  %1188 = add i32 %1174, 128, !dbg !44
  %1189 = icmp slt i32 %1188, %20, !dbg !44
  br i1 %1189, label %1172, label %._crit_edge, !dbg !44

._crit_edge:                                      ; preds = %1172, %1158
  %.lcssa260 = phi i64 [ %1159, %1158 ], [ %1187, %1172 ], !dbg !90
  %1190 = add i32 %1160, %1128, !dbg !74
  %1191 = add nuw nsw i32 %1161, 1, !dbg !33
  %exitcond.not = icmp eq i32 %1191, %1135, !dbg !33
  br i1 %exitcond.not, label %._crit_edge269, label %1158, !dbg !33

._crit_edge269:                                   ; preds = %._crit_edge, %1124
  tail call void asm sideeffect "barrier.sync 1 ;", ""() #7, !dbg !8
  tail call void @llvm.nvvm.setmaxnreg.dec.sync.aligned.u32(i32 24), !dbg !8
  br label %.preheader.backedge, !dbg !8

.preheader.backedge:                              ; preds = %._crit_edge269, %._crit_edge276, %._crit_edge283, %._crit_edge290, %._crit_edge299, %30
  br label %.preheader, !dbg !8, !llvm.loop !91

1192:                                             ; preds = %22
  tail call void @llvm.nvvm.setmaxnreg.inc.sync.aligned.u32(i32 200), !dbg !8
  %1193 = icmp ult i32 %23, 32, !dbg !8
  tail call void asm sideeffect "@$0 tcgen05.alloc.cta_group::1.sync.aligned.shared::cta.b32 [$1], 256;", "b,r"(i1 %1193, ptr addrspace(3) @global_smem) #7, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !8
  %1194 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !8
  %1195 = inttoptr i32 %1194 to ptr addrspace(6), !dbg !8
  tail call void asm sideeffect "@$0 tcgen05.relinquish_alloc_permit.cta_group::1.sync.aligned;", "b"(i1 %1193) #7, !dbg !8
  %1196 = icmp eq i32 %23, 0, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230224)) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230240)) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230256)) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230272)) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230144)) #7, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230152)) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230288)) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230304)) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230160)) #7, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230168)) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230320)) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230336)) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %1196, ptr addrspace(3) @global_smem) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 32;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230352)) #7, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %1196, ptr addrspace(3) @global_smem) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 32;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230368)) #7, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %1196, ptr addrspace(3) @global_smem) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 32;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230176)) #7, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8)) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 32;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230184)) #7, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 32;", "b,r"(i1 %1196, ptr addrspace(3) @global_smem) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 256;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230384)) #7, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 32;", "b,r"(i1 %1196, ptr addrspace(3) @global_smem) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 256;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230400)) #7, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %1196, ptr addrspace(3) @global_smem) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 32;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230192)) #7, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 1;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 8)) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 32;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230200)) #7, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 32;", "b,r"(i1 %1196, ptr addrspace(3) @global_smem) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 256;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230416)) #7, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 256;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230432)) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 32;", "b,r"(i1 %1196, ptr addrspace(3) @global_smem) #7, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 32;", "b,r"(i1 %1196, ptr addrspace(3) @global_smem) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 256;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230448)) #7, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 256;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230464)) #7, !dbg !8
  tail call void asm sideeffect "@$0 mbarrier.init.shared::cta.b64 [$1], 32;", "b,r"(i1 %1196, ptr addrspace(3) @global_smem) #7, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !8
  %1197 = inttoptr i32 %1194 to ptr addrspace(3), !dbg !76
  %1198 = add i32 %1194, 1048576, !dbg !45
  %1199 = inttoptr i32 %1198 to ptr addrspace(3), !dbg !45
  %1200 = add i32 %1194, 128, !dbg !78
  %1201 = inttoptr i32 %1200 to ptr addrspace(3), !dbg !78
  %1202 = add i32 %1194, 1048704, !dbg !43
  %1203 = inttoptr i32 %1202 to ptr addrspace(3), !dbg !43
  store i64 0, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230208), align 16, !dbg !8
  store i8 1, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230216), align 8, !dbg !8
  store i8 2, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230217), align 1, !dbg !8
  store i8 3, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230218), align 2, !dbg !8
  store i8 4, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230219), align 1, !dbg !8
  store ptr addrspace(3) %1199, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229376), align 16, !dbg !8
  store ptr addrspace(3) %1203, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229384), align 8, !dbg !8
  store ptr addrspace(3) %1197, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229392), align 16, !dbg !8
  store ptr addrspace(3) %1201, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 229400), align 8, !dbg !8
  tail call void asm sideeffect "barrier.sync 1 ;", ""() #7, !dbg !8
  tail call void @llvm.nvvm.setmaxnreg.dec.sync.aligned.u32(i32 112), !dbg !8
  tail call void asm sideeffect "barrier.sync 1 ;", ""() #7, !dbg !8
  %1204 = add i32 %20, 127, !dbg !10
  %1205 = sdiv i32 %1204, 128, !dbg !14
  %1206 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !15
  %1207 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.x(), !dbg !16
  %1208 = mul i32 %19, %18, !dbg !17
  %1209 = mul i32 %1208, %1205, !dbg !18
  %.frozen384 = freeze i32 %1209, !dbg !19
  %1210 = sdiv i32 %.frozen384, %1207, !dbg !19
  %1211 = mul i32 %1210, %1207, !dbg !20
  %.decomposed385 = sub i32 %.frozen384, %1211, !dbg !20
  %1212 = icmp slt i32 %1206, %.decomposed385, !dbg !21
  %1213 = zext i1 %1212 to i32, !dbg !22
  %1214 = add i32 %1210, %1213, !dbg !22
  %1215 = mul i32 %1208, %20, !dbg !23
  %1216 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.y(), !dbg !24
  %1217 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.z(), !dbg !24
  %1218 = tail call i32 @llvm.nvvm.read.ptx.sreg.nctaid.y(), !dbg !24
  %1219 = mul i32 %1217, %1218, !dbg !24
  %1220 = add i32 %1219, %1216, !dbg !24
  %1221 = mul i32 %1220, %1207, !dbg !24
  %1222 = add i32 %1221, %1206, !dbg !24
  %1223 = mul i32 %1222, 768, !dbg !24
  %1224 = sext i32 %1223 to i64, !dbg !24
  %1225 = getelementptr i8, ptr addrspace(1) %21, i64 %1224, !dbg !24
  %1226 = icmp slt i32 %23, 32, !dbg !24
  %1227 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 %23, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1227, <1 x i32> zeroinitializer, i1 %1226) #7, !dbg !24
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !24
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), ptr addrspace(1) %0, i1 %1196) #7, !dbg !24
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i1 %1196) #7, !dbg !24
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 64, i1 %1196) #7, !dbg !24
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 64, i1 %1196) #7, !dbg !24
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 128, i1 %1196) #7, !dbg !24
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 %1215, i1 %1196) #7, !dbg !24
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i64 256, i1 %1196) #7, !dbg !24
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 1, i1 %1196) #7, !dbg !24
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 1, i1 %1196) #7, !dbg !24
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0xa;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i1 %1196) #7, !dbg !24
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i1 %1196) #7, !dbg !24
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x3;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i1 %1196) #7, !dbg !24
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i1 %1196) #7, !dbg !24
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %1225, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i1 %1226) #7, !dbg !24
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %1225, i1 %1226) #7, !dbg !24
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !24
  %1228 = or disjoint i32 %1223, 128, !dbg !25
  %1229 = sext i32 %1228 to i64, !dbg !25
  %1230 = getelementptr i8, ptr addrspace(1) %21, i64 %1229, !dbg !25
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1227, <1 x i32> zeroinitializer, i1 %1226) #7, !dbg !25
  tail call void @llvm.nvvm.bar.warp.sync(i32 -1), !dbg !25
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_address.shared::cta.b1024.b64 [ $0 + 0 ], $1;", "l,l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), ptr addrspace(1) %5, i1 %1196) #7, !dbg !25
  tail call void asm sideeffect "@$1 tensormap.replace.tile.rank.shared::cta.b1024.b32 [ $0 + 0 ], 0x1;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i1 %1196) #7, !dbg !25
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 64, i1 %1196) #7, !dbg !25
  tail call void asm sideeffect "@$2 tensormap.replace.tile.box_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 64, i1 %1196) #7, !dbg !25
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 128, i1 %1196) #7, !dbg !25
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_dim.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 %1215, i1 %1196) #7, !dbg !25
  tail call void asm sideeffect "@$2 tensormap.replace.tile.global_stride.shared::cta.b1024.b64 [ $0 + 0 ], 0x0, $1;", "l,l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i64 256, i1 %1196) #7, !dbg !25
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x0, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 1, i1 %1196) #7, !dbg !25
  tail call void asm sideeffect "@$2 tensormap.replace.tile.element_stride.shared::cta.b1024.b32 [ $0 + 0 ], 0x1, $1;", "l,r,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 1, i1 %1196) #7, !dbg !25
  tail call void asm sideeffect "@$1 tensormap.replace.tile.elemtype.shared::cta.b1024.b32 [ $0 + 0 ], 0xa;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i1 %1196) #7, !dbg !25
  tail call void asm sideeffect "@$1 tensormap.replace.tile.interleave_layout.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i1 %1196) #7, !dbg !25
  tail call void asm sideeffect "@$1 tensormap.replace.tile.swizzle_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x3;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i1 %1196) #7, !dbg !25
  tail call void asm sideeffect "@$1 tensormap.replace.tile.fill_mode.shared::cta.b1024.b32 [ $0 + 0 ], 0x0;", "l,b"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i1 %1196) #7, !dbg !25
  tail call void asm sideeffect "@$2 tensormap.cp_fenceproxy.global.shared::cta.tensormap::generic.release.gpu.sync.aligned [ $0 + 0 ], [ $1 + 0 ], 0x80;", "l,l,b"(ptr addrspace(1) %1230, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i1 %1226) #7, !dbg !25
  tail call void asm sideeffect "@$1 fence.proxy.tensormap::generic.acquire.gpu [ $0 + 0 ], 0x80;", "l,b"(ptr addrspace(1) %1230, i1 %1226) #7, !dbg !25
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !25
  %1231 = insertelement <2 x i32> poison, i32 %7, i64 0, !dbg !26
  %1232 = insertelement <2 x i32> %1231, i32 %6, i64 1, !dbg !26
  %1233 = sext <2 x i32> %1232 to <2 x i64>, !dbg !26
  %1234 = and i32 %23, 63, !dbg !29
  %1235 = fmul float %3, 0x3FF7154760000000, !dbg !30
  %1236 = sext i32 %8 to i64, !dbg !93
  %1237 = sext i32 %17 to i64, !dbg !94
  %1238 = icmp sgt i32 %1214, 0, !dbg !33
  br i1 %1238, label %.lr.ph307, label %._crit_edge308, !dbg !33

.lr.ph307:                                        ; preds = %1192
  %1239 = and i32 %23, 15, !dbg !29
  %1240 = and i32 %23, 4, !dbg !29
  %1241 = icmp eq i32 %1240, 0, !dbg !29
  %1242 = and i32 %23, 2, !dbg !29
  %1243 = icmp eq i32 %1242, 0, !dbg !29
  %1244 = and i32 %23, 1, !dbg !29
  %.not22 = icmp eq i32 %1244, 0, !dbg !29
  %1245 = and i32 %23, 16, !dbg !29
  %1246 = icmp ult i32 %23, 64
  %1247 = icmp sgt i32 %20, 0
  %1248 = lshr i32 %23, 7
  %1249 = and i32 %1248, 1
  %1250 = icmp eq i32 %1245, 0
  %1251 = shl nuw nsw i32 %1239, 1
  %.mask23 = and i32 %23, 96
  %1252 = or disjoint i32 %1251, %.mask23
  %1253 = or disjoint i32 %1252, %1249
  %1254 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 %1253
  %1255 = icmp slt i32 %23, 128
  %1256 = and i1 %1255, %.not22
  %1257 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 %1252
  %1258 = select i1 %.not22, i32 0, i32 72
  %1259 = select i1 %1243, i32 0, i32 144
  %1260 = select i1 %1241, i32 0, i32 288
  %1261 = shl i32 %23, 6
  %1262 = and i32 %1261, 512
  %1263 = or disjoint i32 %1260, %1262
  %1264 = or disjoint i32 %1263, %1259
  %1265 = or disjoint i32 %1264, %1258
  %1266 = shl nuw nsw i32 %1245, 1
  %1267 = xor i32 %1265, %1266
  %1268 = shl i32 %23, 5
  %1269 = and i32 %1268, 1024
  %1270 = or disjoint i32 %1267, %1269
  %1271 = shl i32 %23, 5
  %and.ra256 = and i32 %1271, 6144
  %1272 = xor i32 %1270, %and.ra256
  %1273 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 163840), i32 %1272
  %1274 = xor i32 %1272, 8
  %1275 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 163840), i32 %1274
  %1276 = or disjoint i32 %1258, 16
  %1277 = xor i32 %1276, %1259
  %1278 = or disjoint i32 %1262, %1277
  %1279 = or disjoint i32 %1278, %1260
  %1280 = or disjoint i32 %1266, %and.ra256
  %1281 = or disjoint i32 %1280, %1269
  %1282 = xor i32 %1281, %1279
  %1283 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 163840), i32 %1282
  %1284 = xor i32 %1272, 24
  %1285 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 163840), i32 %1284
  %1286 = lshr i32 %23, 1
  %1287 = and i32 %1286, 48
  %1288 = or disjoint i32 %1287, %1239
  %1289 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 %1288
  %1290 = getelementptr inbounds nuw float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 %1234
  %1291 = and i32 %23, 192
  %1292 = icmp eq i32 %1291, 0
  %1293 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 %1272
  %1294 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 %1274
  %1295 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 %1282
  %1296 = getelementptr inbounds nuw bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 %1284
  br label %1297, !dbg !33

1297:                                             ; preds = %.lr.ph307, %__nv_log2f.exit250
  %1298 = phi i1 [ false, %.lr.ph307 ], [ %.lcssa, %__nv_log2f.exit250 ]
  %1299 = phi i32 [ 0, %.lr.ph307 ], [ %2062, %__nv_log2f.exit250 ]
  %1300 = phi i32 [ %1206, %.lr.ph307 ], [ %2061, %__nv_log2f.exit250 ]
  %.frozen386 = freeze i32 %1300, !dbg !34
  %.frozen387 = freeze i32 %1205, !dbg !34
  %1301 = sdiv i32 %.frozen386, %.frozen387, !dbg !34
  %1302 = mul i32 %1301, %.frozen387, !dbg !35
  %.decomposed388 = sub i32 %.frozen386, %1302, !dbg !35
  %.frozen389 = freeze i32 %19, !dbg !36
  %1303 = sdiv i32 %1301, %.frozen389, !dbg !36
  %1304 = mul i32 %1303, %.frozen389, !dbg !37
  %.decomposed390 = sub i32 %1301, %1304, !dbg !37
  %1305 = insertelement <2 x i32> poison, i32 %.decomposed390, i64 0, !dbg !38
  %1306 = insertelement <2 x i32> %1305, i32 %1303, i64 1, !dbg !38
  %1307 = sext <2 x i32> %1306 to <2 x i64>, !dbg !38
  %1308 = mul nsw <2 x i64> %1307, %1233, !dbg !26
  %shift344 = shufflevector <2 x i64> %1308, <2 x i64> poison, <2 x i32> <i32 1, i32 poison>, !dbg !39
  %1309 = add <2 x i64> %1308, %shift344, !dbg !39
  %1310 = extractelement <2 x i64> %1309, i64 0, !dbg !39
  %1311 = shl nsw i32 %.decomposed388, 7, !dbg !40
  %1312 = or disjoint i32 %1311, %1234, !dbg !95
  %1313 = sdiv i64 %1310, %1236, !dbg !93
  %1314 = trunc i64 %1313 to i32, !dbg !96
  %1315 = add i32 %1311, %1314, !dbg !96
  %1316 = and i32 %1299, 1, !dbg !97
  %1317 = xor i32 %1316, 1, !dbg !97
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230352), i32 %1317) #7, !dbg !97
  tail call void asm sideeffect "@$0 mbarrier.arrive.expect_tx.shared.b64 _, [$1], 16384;", "b,r"(i1 %1196, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230336)) #7, !dbg !8
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !8
  %1318 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %24, i32 0, i32 31), !dbg !8
  %1319 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !8
  %1320 = extractvalue { i32, i1 } %1319, 1, !dbg !8
  %1321 = and i1 %1246, %1320, !dbg !8
  %1322 = shl i32 %1318, 12, !dbg !8
  %1323 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 131072), i32 %1322, !dbg !8
  %1324 = shl i32 %1318, 6, !dbg !8
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [$1], [$2, {$3, $4}], [$5];", "b,r,l,r,r,r"(i1 %1321, ptr addrspace(3) %1323, ptr addrspace(1) %1225, i32 %1324, i32 %1315, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230336)) #7, !dbg !8
  %1325 = shl i32 %1318, 21, !dbg !78
  %1326 = and i32 %1325, 6291456, !dbg !78
  %1327 = shl i32 %1318, 4, !dbg !78
  %1328 = and i32 %1327, 64, !dbg !78
  %1329 = shl i32 %1318, 3, !dbg !78
  %1330 = and i32 %1329, -64, !dbg !78
  %1331 = add i32 %1328, %1330, !dbg !78
  %1332 = add i32 %1331, %1326, !dbg !78
  %1333 = add i32 %1332, %1200, !dbg !78
  tail call void asm sideeffect "@$0 tcgen05.st.sync.aligned.16x32bx2.x32.b32 [$1], 32, {$2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33};", "b,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r"(i1 true, i32 %1333, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00) #7, !dbg !78
  tail call void asm sideeffect "tcgen05.wait::st.sync.aligned;", ""() #7, !dbg !78
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !78
  br i1 %1247, label %.lr.ph301, label %._crit_edge302, !dbg !44

.lr.ph301:                                        ; preds = %1297
  %1334 = add i32 %1332, %1194
  br label %1335, !dbg !44

1335:                                             ; preds = %.lr.ph301, %__nv_exp2f.exit218
  %1336 = phi i1 [ %1298, %.lr.ph301 ], [ %1726, %__nv_exp2f.exit218 ]
  %1337 = phi float [ 0xFFF0000000000000, %.lr.ph301 ], [ %1450, %__nv_exp2f.exit218 ]
  %1338 = phi float [ 1.000000e+00, %.lr.ph301 ], [ %1725, %__nv_exp2f.exit218 ]
  %1339 = phi i32 [ 0, %.lr.ph301 ], [ %1861, %__nv_exp2f.exit218 ]
  %1340 = sext i1 %1336 to i32, !dbg !76
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230304), i32 %1340) #7, !dbg !76
  %1341 = tail call { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } asm sideeffect "tcgen05.ld.sync.aligned.16x32bx2.x32.b32 {$0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31}, [$32], 32;", "=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,r"(i32 %1334) #7, !dbg !76
  %1342 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 0, !dbg !76
  %1343 = bitcast i32 %1342 to float, !dbg !76
  %1344 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 1, !dbg !76
  %1345 = bitcast i32 %1344 to float, !dbg !76
  %1346 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 2, !dbg !76
  %1347 = bitcast i32 %1346 to float, !dbg !76
  %1348 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 3, !dbg !76
  %1349 = bitcast i32 %1348 to float, !dbg !76
  %1350 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 4, !dbg !76
  %1351 = bitcast i32 %1350 to float, !dbg !76
  %1352 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 5, !dbg !76
  %1353 = bitcast i32 %1352 to float, !dbg !76
  %1354 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 6, !dbg !76
  %1355 = bitcast i32 %1354 to float, !dbg !76
  %1356 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 7, !dbg !76
  %1357 = bitcast i32 %1356 to float, !dbg !76
  %1358 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 8, !dbg !76
  %1359 = bitcast i32 %1358 to float, !dbg !76
  %1360 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 9, !dbg !76
  %1361 = bitcast i32 %1360 to float, !dbg !76
  %1362 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 10, !dbg !76
  %1363 = bitcast i32 %1362 to float, !dbg !76
  %1364 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 11, !dbg !76
  %1365 = bitcast i32 %1364 to float, !dbg !76
  %1366 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 12, !dbg !76
  %1367 = bitcast i32 %1366 to float, !dbg !76
  %1368 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 13, !dbg !76
  %1369 = bitcast i32 %1368 to float, !dbg !76
  %1370 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 14, !dbg !76
  %1371 = bitcast i32 %1370 to float, !dbg !76
  %1372 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 15, !dbg !76
  %1373 = bitcast i32 %1372 to float, !dbg !76
  %1374 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 16, !dbg !76
  %1375 = bitcast i32 %1374 to float, !dbg !76
  %1376 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 17, !dbg !76
  %1377 = bitcast i32 %1376 to float, !dbg !76
  %1378 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 18, !dbg !76
  %1379 = bitcast i32 %1378 to float, !dbg !76
  %1380 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 19, !dbg !76
  %1381 = bitcast i32 %1380 to float, !dbg !76
  %1382 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 20, !dbg !76
  %1383 = bitcast i32 %1382 to float, !dbg !76
  %1384 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 21, !dbg !76
  %1385 = bitcast i32 %1384 to float, !dbg !76
  %1386 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 22, !dbg !76
  %1387 = bitcast i32 %1386 to float, !dbg !76
  %1388 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 23, !dbg !76
  %1389 = bitcast i32 %1388 to float, !dbg !76
  %1390 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 24, !dbg !76
  %1391 = bitcast i32 %1390 to float, !dbg !76
  %1392 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 25, !dbg !76
  %1393 = bitcast i32 %1392 to float, !dbg !76
  %1394 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 26, !dbg !76
  %1395 = bitcast i32 %1394 to float, !dbg !76
  %1396 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 27, !dbg !76
  %1397 = bitcast i32 %1396 to float, !dbg !76
  %1398 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 28, !dbg !76
  %1399 = bitcast i32 %1398 to float, !dbg !76
  %1400 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 29, !dbg !76
  %1401 = bitcast i32 %1400 to float, !dbg !76
  %1402 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 30, !dbg !76
  %1403 = bitcast i32 %1402 to float, !dbg !76
  %1404 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1341, 31, !dbg !76
  %1405 = bitcast i32 %1404 to float, !dbg !76
  tail call void asm sideeffect "tcgen05.wait::ld.sync.aligned;", ""() #7, !dbg !76
  tail call void asm sideeffect "@$1 mbarrier.arrive.shared.b64 _, [$0];", "r,b"(i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230384) to i32), i1 true) #7, !dbg !76
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !46
  %1406 = tail call float @llvm.maxnum.f32(float %1343, float %1345), !dbg !47
  %1407 = tail call float @llvm.maxnum.f32(float %1406, float %1347), !dbg !47
  %1408 = tail call float @llvm.maxnum.f32(float %1407, float %1349), !dbg !47
  %1409 = tail call float @llvm.maxnum.f32(float %1408, float %1351), !dbg !47
  %1410 = tail call float @llvm.maxnum.f32(float %1409, float %1353), !dbg !47
  %1411 = tail call float @llvm.maxnum.f32(float %1410, float %1355), !dbg !47
  %1412 = tail call float @llvm.maxnum.f32(float %1411, float %1357), !dbg !47
  %1413 = tail call float @llvm.maxnum.f32(float %1412, float %1359), !dbg !47
  %1414 = tail call float @llvm.maxnum.f32(float %1413, float %1361), !dbg !47
  %1415 = tail call float @llvm.maxnum.f32(float %1414, float %1363), !dbg !47
  %1416 = tail call float @llvm.maxnum.f32(float %1415, float %1365), !dbg !47
  %1417 = tail call float @llvm.maxnum.f32(float %1416, float %1367), !dbg !47
  %1418 = tail call float @llvm.maxnum.f32(float %1417, float %1369), !dbg !47
  %1419 = tail call float @llvm.maxnum.f32(float %1418, float %1371), !dbg !47
  %1420 = tail call float @llvm.maxnum.f32(float %1419, float %1373), !dbg !47
  %1421 = tail call float @llvm.maxnum.f32(float %1420, float %1375), !dbg !47
  %1422 = tail call float @llvm.maxnum.f32(float %1421, float %1377), !dbg !47
  %1423 = tail call float @llvm.maxnum.f32(float %1422, float %1379), !dbg !47
  %1424 = tail call float @llvm.maxnum.f32(float %1423, float %1381), !dbg !47
  %1425 = tail call float @llvm.maxnum.f32(float %1424, float %1383), !dbg !47
  %1426 = tail call float @llvm.maxnum.f32(float %1425, float %1385), !dbg !47
  %1427 = tail call float @llvm.maxnum.f32(float %1426, float %1387), !dbg !47
  %1428 = tail call float @llvm.maxnum.f32(float %1427, float %1389), !dbg !47
  %1429 = tail call float @llvm.maxnum.f32(float %1428, float %1391), !dbg !47
  %1430 = tail call float @llvm.maxnum.f32(float %1429, float %1393), !dbg !47
  %1431 = tail call float @llvm.maxnum.f32(float %1430, float %1395), !dbg !47
  %1432 = tail call float @llvm.maxnum.f32(float %1431, float %1397), !dbg !47
  %1433 = tail call float @llvm.maxnum.f32(float %1432, float %1399), !dbg !47
  %1434 = tail call float @llvm.maxnum.f32(float %1433, float %1401), !dbg !47
  %1435 = tail call float @llvm.maxnum.f32(float %1434, float %1403), !dbg !47
  %1436 = tail call float @llvm.maxnum.f32(float %1435, float %1405), !dbg !47
  %1437 = bitcast float %1436 to i32, !dbg !46
  %1438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1437, i32 16, i32 31), !dbg !46
  %1439 = bitcast i32 %1438 to float, !dbg !46
  %1440 = tail call float @llvm.maxnum.f32(float %1436, float %1439), !dbg !47
  %1441 = bitcast float %1440 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1254, <1 x i32> %1441, i1 %1250) #7, !dbg !46
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !46
  %1442 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1227, i1 %1255) #7, !dbg !46
  %1443 = bitcast i32 %1442 to float, !dbg !46
  %1444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1442, i32 1, i32 31), !dbg !46
  %1445 = bitcast i32 %1444 to float, !dbg !46
  %1446 = tail call float @llvm.maxnum.f32(float %1443, float %1445), !dbg !47
  %1447 = bitcast float %1446 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1227, <1 x i32> %1447, i1 %1256) #7, !dbg !46
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !46
  %1448 = load float, ptr addrspace(3) %1257, align 8, !dbg !46
  %1449 = fmul float %1235, %1448, !dbg !98
  %1450 = tail call float @llvm.maxnum.f32(float %1337, float %1449), !dbg !99
  %1451 = fmul float %1235, %1343, !dbg !100
  %1452 = fmul float %1235, %1345, !dbg !100
  %1453 = fmul float %1235, %1347, !dbg !100
  %1454 = fmul float %1235, %1349, !dbg !100
  %1455 = fmul float %1235, %1351, !dbg !100
  %1456 = fmul float %1235, %1353, !dbg !100
  %1457 = fmul float %1235, %1355, !dbg !100
  %1458 = fmul float %1235, %1357, !dbg !100
  %1459 = fmul float %1235, %1359, !dbg !100
  %1460 = fmul float %1235, %1361, !dbg !100
  %1461 = fmul float %1235, %1363, !dbg !100
  %1462 = fmul float %1235, %1365, !dbg !100
  %1463 = fmul float %1235, %1367, !dbg !100
  %1464 = fmul float %1235, %1369, !dbg !100
  %1465 = fmul float %1235, %1371, !dbg !100
  %1466 = fmul float %1235, %1373, !dbg !100
  %1467 = fmul float %1235, %1375, !dbg !100
  %1468 = fmul float %1235, %1377, !dbg !100
  %1469 = fmul float %1235, %1379, !dbg !100
  %1470 = fmul float %1235, %1381, !dbg !100
  %1471 = fmul float %1235, %1383, !dbg !100
  %1472 = fmul float %1235, %1385, !dbg !100
  %1473 = fmul float %1235, %1387, !dbg !100
  %1474 = fmul float %1235, %1389, !dbg !100
  %1475 = fmul float %1235, %1391, !dbg !100
  %1476 = fmul float %1235, %1393, !dbg !100
  %1477 = fmul float %1235, %1395, !dbg !100
  %1478 = fmul float %1235, %1397, !dbg !100
  %1479 = fmul float %1235, %1399, !dbg !100
  %1480 = fmul float %1235, %1401, !dbg !100
  %1481 = fmul float %1235, %1403, !dbg !100
  %1482 = fmul float %1235, %1405, !dbg !100
  %1483 = fsub float %1451, %1450, !dbg !101
  %1484 = fsub float %1452, %1450, !dbg !101
  %1485 = fsub float %1453, %1450, !dbg !101
  %1486 = fsub float %1454, %1450, !dbg !101
  %1487 = fsub float %1455, %1450, !dbg !101
  %1488 = fsub float %1456, %1450, !dbg !101
  %1489 = fsub float %1457, %1450, !dbg !101
  %1490 = fsub float %1458, %1450, !dbg !101
  %1491 = fsub float %1459, %1450, !dbg !101
  %1492 = fsub float %1460, %1450, !dbg !101
  %1493 = fsub float %1461, %1450, !dbg !101
  %1494 = fsub float %1462, %1450, !dbg !101
  %1495 = fsub float %1463, %1450, !dbg !101
  %1496 = fsub float %1464, %1450, !dbg !101
  %1497 = fsub float %1465, %1450, !dbg !101
  %1498 = fsub float %1466, %1450, !dbg !101
  %1499 = fsub float %1467, %1450, !dbg !101
  %1500 = fsub float %1468, %1450, !dbg !101
  %1501 = fsub float %1469, %1450, !dbg !101
  %1502 = fsub float %1470, %1450, !dbg !101
  %1503 = fsub float %1471, %1450, !dbg !101
  %1504 = fsub float %1472, %1450, !dbg !101
  %1505 = fsub float %1473, %1450, !dbg !101
  %1506 = fsub float %1474, %1450, !dbg !101
  %1507 = fsub float %1475, %1450, !dbg !101
  %1508 = fsub float %1476, %1450, !dbg !101
  %1509 = fsub float %1477, %1450, !dbg !101
  %1510 = fsub float %1478, %1450, !dbg !101
  %1511 = fsub float %1479, %1450, !dbg !101
  %1512 = fsub float %1480, %1450, !dbg !101
  %1513 = fsub float %1481, %1450, !dbg !101
  %1514 = fsub float %1482, %1450, !dbg !101
  %1515 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i120 = icmp eq i32 %1515, 0, !dbg !102
  br i1 %.not.i120, label %1518, label %1516, !dbg !102

1516:                                             ; preds = %1335
  %1517 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1483) #7, !dbg !102
  br label %__nv_exp2f.exit122, !dbg !102

1518:                                             ; preds = %1335
  %1519 = tail call float @llvm.nvvm.ex2.approx.f(float %1483) #7, !dbg !102
  br label %__nv_exp2f.exit122, !dbg !102

__nv_exp2f.exit122:                               ; preds = %1516, %1518
  %.0.i121 = phi float [ %1517, %1516 ], [ %1519, %1518 ], !dbg !102
  %1520 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i123 = icmp eq i32 %1520, 0, !dbg !102
  br i1 %.not.i123, label %1523, label %1521, !dbg !102

1521:                                             ; preds = %__nv_exp2f.exit122
  %1522 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1484) #7, !dbg !102
  br label %__nv_exp2f.exit125, !dbg !102

1523:                                             ; preds = %__nv_exp2f.exit122
  %1524 = tail call float @llvm.nvvm.ex2.approx.f(float %1484) #7, !dbg !102
  br label %__nv_exp2f.exit125, !dbg !102

__nv_exp2f.exit125:                               ; preds = %1521, %1523
  %.0.i124 = phi float [ %1522, %1521 ], [ %1524, %1523 ], !dbg !102
  %1525 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i126 = icmp eq i32 %1525, 0, !dbg !102
  br i1 %.not.i126, label %1528, label %1526, !dbg !102

1526:                                             ; preds = %__nv_exp2f.exit125
  %1527 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1485) #7, !dbg !102
  br label %__nv_exp2f.exit128, !dbg !102

1528:                                             ; preds = %__nv_exp2f.exit125
  %1529 = tail call float @llvm.nvvm.ex2.approx.f(float %1485) #7, !dbg !102
  br label %__nv_exp2f.exit128, !dbg !102

__nv_exp2f.exit128:                               ; preds = %1526, %1528
  %.0.i127 = phi float [ %1527, %1526 ], [ %1529, %1528 ], !dbg !102
  %1530 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i129 = icmp eq i32 %1530, 0, !dbg !102
  br i1 %.not.i129, label %1533, label %1531, !dbg !102

1531:                                             ; preds = %__nv_exp2f.exit128
  %1532 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1486) #7, !dbg !102
  br label %__nv_exp2f.exit131, !dbg !102

1533:                                             ; preds = %__nv_exp2f.exit128
  %1534 = tail call float @llvm.nvvm.ex2.approx.f(float %1486) #7, !dbg !102
  br label %__nv_exp2f.exit131, !dbg !102

__nv_exp2f.exit131:                               ; preds = %1531, %1533
  %.0.i130 = phi float [ %1532, %1531 ], [ %1534, %1533 ], !dbg !102
  %1535 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i132 = icmp eq i32 %1535, 0, !dbg !102
  br i1 %.not.i132, label %1538, label %1536, !dbg !102

1536:                                             ; preds = %__nv_exp2f.exit131
  %1537 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1487) #7, !dbg !102
  br label %__nv_exp2f.exit134, !dbg !102

1538:                                             ; preds = %__nv_exp2f.exit131
  %1539 = tail call float @llvm.nvvm.ex2.approx.f(float %1487) #7, !dbg !102
  br label %__nv_exp2f.exit134, !dbg !102

__nv_exp2f.exit134:                               ; preds = %1536, %1538
  %.0.i133 = phi float [ %1537, %1536 ], [ %1539, %1538 ], !dbg !102
  %1540 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i135 = icmp eq i32 %1540, 0, !dbg !102
  br i1 %.not.i135, label %1543, label %1541, !dbg !102

1541:                                             ; preds = %__nv_exp2f.exit134
  %1542 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1488) #7, !dbg !102
  br label %__nv_exp2f.exit137, !dbg !102

1543:                                             ; preds = %__nv_exp2f.exit134
  %1544 = tail call float @llvm.nvvm.ex2.approx.f(float %1488) #7, !dbg !102
  br label %__nv_exp2f.exit137, !dbg !102

__nv_exp2f.exit137:                               ; preds = %1541, %1543
  %.0.i136 = phi float [ %1542, %1541 ], [ %1544, %1543 ], !dbg !102
  %1545 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i138 = icmp eq i32 %1545, 0, !dbg !102
  br i1 %.not.i138, label %1548, label %1546, !dbg !102

1546:                                             ; preds = %__nv_exp2f.exit137
  %1547 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1489) #7, !dbg !102
  br label %__nv_exp2f.exit140, !dbg !102

1548:                                             ; preds = %__nv_exp2f.exit137
  %1549 = tail call float @llvm.nvvm.ex2.approx.f(float %1489) #7, !dbg !102
  br label %__nv_exp2f.exit140, !dbg !102

__nv_exp2f.exit140:                               ; preds = %1546, %1548
  %.0.i139 = phi float [ %1547, %1546 ], [ %1549, %1548 ], !dbg !102
  %1550 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i141 = icmp eq i32 %1550, 0, !dbg !102
  br i1 %.not.i141, label %1553, label %1551, !dbg !102

1551:                                             ; preds = %__nv_exp2f.exit140
  %1552 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1490) #7, !dbg !102
  br label %__nv_exp2f.exit143, !dbg !102

1553:                                             ; preds = %__nv_exp2f.exit140
  %1554 = tail call float @llvm.nvvm.ex2.approx.f(float %1490) #7, !dbg !102
  br label %__nv_exp2f.exit143, !dbg !102

__nv_exp2f.exit143:                               ; preds = %1551, %1553
  %.0.i142 = phi float [ %1552, %1551 ], [ %1554, %1553 ], !dbg !102
  %1555 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i144 = icmp eq i32 %1555, 0, !dbg !102
  br i1 %.not.i144, label %1558, label %1556, !dbg !102

1556:                                             ; preds = %__nv_exp2f.exit143
  %1557 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1491) #7, !dbg !102
  br label %__nv_exp2f.exit146, !dbg !102

1558:                                             ; preds = %__nv_exp2f.exit143
  %1559 = tail call float @llvm.nvvm.ex2.approx.f(float %1491) #7, !dbg !102
  br label %__nv_exp2f.exit146, !dbg !102

__nv_exp2f.exit146:                               ; preds = %1556, %1558
  %.0.i145 = phi float [ %1557, %1556 ], [ %1559, %1558 ], !dbg !102
  %1560 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i147 = icmp eq i32 %1560, 0, !dbg !102
  br i1 %.not.i147, label %1563, label %1561, !dbg !102

1561:                                             ; preds = %__nv_exp2f.exit146
  %1562 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1492) #7, !dbg !102
  br label %__nv_exp2f.exit149, !dbg !102

1563:                                             ; preds = %__nv_exp2f.exit146
  %1564 = tail call float @llvm.nvvm.ex2.approx.f(float %1492) #7, !dbg !102
  br label %__nv_exp2f.exit149, !dbg !102

__nv_exp2f.exit149:                               ; preds = %1561, %1563
  %.0.i148 = phi float [ %1562, %1561 ], [ %1564, %1563 ], !dbg !102
  %1565 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i150 = icmp eq i32 %1565, 0, !dbg !102
  br i1 %.not.i150, label %1568, label %1566, !dbg !102

1566:                                             ; preds = %__nv_exp2f.exit149
  %1567 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1493) #7, !dbg !102
  br label %__nv_exp2f.exit152, !dbg !102

1568:                                             ; preds = %__nv_exp2f.exit149
  %1569 = tail call float @llvm.nvvm.ex2.approx.f(float %1493) #7, !dbg !102
  br label %__nv_exp2f.exit152, !dbg !102

__nv_exp2f.exit152:                               ; preds = %1566, %1568
  %.0.i151 = phi float [ %1567, %1566 ], [ %1569, %1568 ], !dbg !102
  %1570 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i153 = icmp eq i32 %1570, 0, !dbg !102
  br i1 %.not.i153, label %1573, label %1571, !dbg !102

1571:                                             ; preds = %__nv_exp2f.exit152
  %1572 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1494) #7, !dbg !102
  br label %__nv_exp2f.exit155, !dbg !102

1573:                                             ; preds = %__nv_exp2f.exit152
  %1574 = tail call float @llvm.nvvm.ex2.approx.f(float %1494) #7, !dbg !102
  br label %__nv_exp2f.exit155, !dbg !102

__nv_exp2f.exit155:                               ; preds = %1571, %1573
  %.0.i154 = phi float [ %1572, %1571 ], [ %1574, %1573 ], !dbg !102
  %1575 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i156 = icmp eq i32 %1575, 0, !dbg !102
  br i1 %.not.i156, label %1578, label %1576, !dbg !102

1576:                                             ; preds = %__nv_exp2f.exit155
  %1577 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1495) #7, !dbg !102
  br label %__nv_exp2f.exit158, !dbg !102

1578:                                             ; preds = %__nv_exp2f.exit155
  %1579 = tail call float @llvm.nvvm.ex2.approx.f(float %1495) #7, !dbg !102
  br label %__nv_exp2f.exit158, !dbg !102

__nv_exp2f.exit158:                               ; preds = %1576, %1578
  %.0.i157 = phi float [ %1577, %1576 ], [ %1579, %1578 ], !dbg !102
  %1580 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i159 = icmp eq i32 %1580, 0, !dbg !102
  br i1 %.not.i159, label %1583, label %1581, !dbg !102

1581:                                             ; preds = %__nv_exp2f.exit158
  %1582 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1496) #7, !dbg !102
  br label %__nv_exp2f.exit161, !dbg !102

1583:                                             ; preds = %__nv_exp2f.exit158
  %1584 = tail call float @llvm.nvvm.ex2.approx.f(float %1496) #7, !dbg !102
  br label %__nv_exp2f.exit161, !dbg !102

__nv_exp2f.exit161:                               ; preds = %1581, %1583
  %.0.i160 = phi float [ %1582, %1581 ], [ %1584, %1583 ], !dbg !102
  %1585 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i162 = icmp eq i32 %1585, 0, !dbg !102
  br i1 %.not.i162, label %1588, label %1586, !dbg !102

1586:                                             ; preds = %__nv_exp2f.exit161
  %1587 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1497) #7, !dbg !102
  br label %__nv_exp2f.exit164, !dbg !102

1588:                                             ; preds = %__nv_exp2f.exit161
  %1589 = tail call float @llvm.nvvm.ex2.approx.f(float %1497) #7, !dbg !102
  br label %__nv_exp2f.exit164, !dbg !102

__nv_exp2f.exit164:                               ; preds = %1586, %1588
  %.0.i163 = phi float [ %1587, %1586 ], [ %1589, %1588 ], !dbg !102
  %1590 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i165 = icmp eq i32 %1590, 0, !dbg !102
  br i1 %.not.i165, label %1593, label %1591, !dbg !102

1591:                                             ; preds = %__nv_exp2f.exit164
  %1592 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1498) #7, !dbg !102
  br label %__nv_exp2f.exit167, !dbg !102

1593:                                             ; preds = %__nv_exp2f.exit164
  %1594 = tail call float @llvm.nvvm.ex2.approx.f(float %1498) #7, !dbg !102
  br label %__nv_exp2f.exit167, !dbg !102

__nv_exp2f.exit167:                               ; preds = %1591, %1593
  %.0.i166 = phi float [ %1592, %1591 ], [ %1594, %1593 ], !dbg !102
  %1595 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i168 = icmp eq i32 %1595, 0, !dbg !102
  br i1 %.not.i168, label %1598, label %1596, !dbg !102

1596:                                             ; preds = %__nv_exp2f.exit167
  %1597 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1499) #7, !dbg !102
  br label %__nv_exp2f.exit170, !dbg !102

1598:                                             ; preds = %__nv_exp2f.exit167
  %1599 = tail call float @llvm.nvvm.ex2.approx.f(float %1499) #7, !dbg !102
  br label %__nv_exp2f.exit170, !dbg !102

__nv_exp2f.exit170:                               ; preds = %1596, %1598
  %.0.i169 = phi float [ %1597, %1596 ], [ %1599, %1598 ], !dbg !102
  %1600 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i171 = icmp eq i32 %1600, 0, !dbg !102
  br i1 %.not.i171, label %1603, label %1601, !dbg !102

1601:                                             ; preds = %__nv_exp2f.exit170
  %1602 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1500) #7, !dbg !102
  br label %__nv_exp2f.exit173, !dbg !102

1603:                                             ; preds = %__nv_exp2f.exit170
  %1604 = tail call float @llvm.nvvm.ex2.approx.f(float %1500) #7, !dbg !102
  br label %__nv_exp2f.exit173, !dbg !102

__nv_exp2f.exit173:                               ; preds = %1601, %1603
  %.0.i172 = phi float [ %1602, %1601 ], [ %1604, %1603 ], !dbg !102
  %1605 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i174 = icmp eq i32 %1605, 0, !dbg !102
  br i1 %.not.i174, label %1608, label %1606, !dbg !102

1606:                                             ; preds = %__nv_exp2f.exit173
  %1607 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1501) #7, !dbg !102
  br label %__nv_exp2f.exit176, !dbg !102

1608:                                             ; preds = %__nv_exp2f.exit173
  %1609 = tail call float @llvm.nvvm.ex2.approx.f(float %1501) #7, !dbg !102
  br label %__nv_exp2f.exit176, !dbg !102

__nv_exp2f.exit176:                               ; preds = %1606, %1608
  %.0.i175 = phi float [ %1607, %1606 ], [ %1609, %1608 ], !dbg !102
  %1610 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i177 = icmp eq i32 %1610, 0, !dbg !102
  br i1 %.not.i177, label %1613, label %1611, !dbg !102

1611:                                             ; preds = %__nv_exp2f.exit176
  %1612 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1502) #7, !dbg !102
  br label %__nv_exp2f.exit179, !dbg !102

1613:                                             ; preds = %__nv_exp2f.exit176
  %1614 = tail call float @llvm.nvvm.ex2.approx.f(float %1502) #7, !dbg !102
  br label %__nv_exp2f.exit179, !dbg !102

__nv_exp2f.exit179:                               ; preds = %1611, %1613
  %.0.i178 = phi float [ %1612, %1611 ], [ %1614, %1613 ], !dbg !102
  %1615 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i180 = icmp eq i32 %1615, 0, !dbg !102
  br i1 %.not.i180, label %1618, label %1616, !dbg !102

1616:                                             ; preds = %__nv_exp2f.exit179
  %1617 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1503) #7, !dbg !102
  br label %__nv_exp2f.exit182, !dbg !102

1618:                                             ; preds = %__nv_exp2f.exit179
  %1619 = tail call float @llvm.nvvm.ex2.approx.f(float %1503) #7, !dbg !102
  br label %__nv_exp2f.exit182, !dbg !102

__nv_exp2f.exit182:                               ; preds = %1616, %1618
  %.0.i181 = phi float [ %1617, %1616 ], [ %1619, %1618 ], !dbg !102
  %1620 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i183 = icmp eq i32 %1620, 0, !dbg !102
  br i1 %.not.i183, label %1623, label %1621, !dbg !102

1621:                                             ; preds = %__nv_exp2f.exit182
  %1622 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1504) #7, !dbg !102
  br label %__nv_exp2f.exit185, !dbg !102

1623:                                             ; preds = %__nv_exp2f.exit182
  %1624 = tail call float @llvm.nvvm.ex2.approx.f(float %1504) #7, !dbg !102
  br label %__nv_exp2f.exit185, !dbg !102

__nv_exp2f.exit185:                               ; preds = %1621, %1623
  %.0.i184 = phi float [ %1622, %1621 ], [ %1624, %1623 ], !dbg !102
  %1625 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i186 = icmp eq i32 %1625, 0, !dbg !102
  br i1 %.not.i186, label %1628, label %1626, !dbg !102

1626:                                             ; preds = %__nv_exp2f.exit185
  %1627 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1505) #7, !dbg !102
  br label %__nv_exp2f.exit188, !dbg !102

1628:                                             ; preds = %__nv_exp2f.exit185
  %1629 = tail call float @llvm.nvvm.ex2.approx.f(float %1505) #7, !dbg !102
  br label %__nv_exp2f.exit188, !dbg !102

__nv_exp2f.exit188:                               ; preds = %1626, %1628
  %.0.i187 = phi float [ %1627, %1626 ], [ %1629, %1628 ], !dbg !102
  %1630 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i189 = icmp eq i32 %1630, 0, !dbg !102
  br i1 %.not.i189, label %1633, label %1631, !dbg !102

1631:                                             ; preds = %__nv_exp2f.exit188
  %1632 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1506) #7, !dbg !102
  br label %__nv_exp2f.exit191, !dbg !102

1633:                                             ; preds = %__nv_exp2f.exit188
  %1634 = tail call float @llvm.nvvm.ex2.approx.f(float %1506) #7, !dbg !102
  br label %__nv_exp2f.exit191, !dbg !102

__nv_exp2f.exit191:                               ; preds = %1631, %1633
  %.0.i190 = phi float [ %1632, %1631 ], [ %1634, %1633 ], !dbg !102
  %1635 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i192 = icmp eq i32 %1635, 0, !dbg !102
  br i1 %.not.i192, label %1638, label %1636, !dbg !102

1636:                                             ; preds = %__nv_exp2f.exit191
  %1637 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1507) #7, !dbg !102
  br label %__nv_exp2f.exit194, !dbg !102

1638:                                             ; preds = %__nv_exp2f.exit191
  %1639 = tail call float @llvm.nvvm.ex2.approx.f(float %1507) #7, !dbg !102
  br label %__nv_exp2f.exit194, !dbg !102

__nv_exp2f.exit194:                               ; preds = %1636, %1638
  %.0.i193 = phi float [ %1637, %1636 ], [ %1639, %1638 ], !dbg !102
  %1640 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i195 = icmp eq i32 %1640, 0, !dbg !102
  br i1 %.not.i195, label %1643, label %1641, !dbg !102

1641:                                             ; preds = %__nv_exp2f.exit194
  %1642 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1508) #7, !dbg !102
  br label %__nv_exp2f.exit197, !dbg !102

1643:                                             ; preds = %__nv_exp2f.exit194
  %1644 = tail call float @llvm.nvvm.ex2.approx.f(float %1508) #7, !dbg !102
  br label %__nv_exp2f.exit197, !dbg !102

__nv_exp2f.exit197:                               ; preds = %1641, %1643
  %.0.i196 = phi float [ %1642, %1641 ], [ %1644, %1643 ], !dbg !102
  %1645 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i198 = icmp eq i32 %1645, 0, !dbg !102
  br i1 %.not.i198, label %1648, label %1646, !dbg !102

1646:                                             ; preds = %__nv_exp2f.exit197
  %1647 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1509) #7, !dbg !102
  br label %__nv_exp2f.exit200, !dbg !102

1648:                                             ; preds = %__nv_exp2f.exit197
  %1649 = tail call float @llvm.nvvm.ex2.approx.f(float %1509) #7, !dbg !102
  br label %__nv_exp2f.exit200, !dbg !102

__nv_exp2f.exit200:                               ; preds = %1646, %1648
  %.0.i199 = phi float [ %1647, %1646 ], [ %1649, %1648 ], !dbg !102
  %1650 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i201 = icmp eq i32 %1650, 0, !dbg !102
  br i1 %.not.i201, label %1653, label %1651, !dbg !102

1651:                                             ; preds = %__nv_exp2f.exit200
  %1652 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1510) #7, !dbg !102
  br label %__nv_exp2f.exit203, !dbg !102

1653:                                             ; preds = %__nv_exp2f.exit200
  %1654 = tail call float @llvm.nvvm.ex2.approx.f(float %1510) #7, !dbg !102
  br label %__nv_exp2f.exit203, !dbg !102

__nv_exp2f.exit203:                               ; preds = %1651, %1653
  %.0.i202 = phi float [ %1652, %1651 ], [ %1654, %1653 ], !dbg !102
  %1655 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i204 = icmp eq i32 %1655, 0, !dbg !102
  br i1 %.not.i204, label %1658, label %1656, !dbg !102

1656:                                             ; preds = %__nv_exp2f.exit203
  %1657 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1511) #7, !dbg !102
  br label %__nv_exp2f.exit206, !dbg !102

1658:                                             ; preds = %__nv_exp2f.exit203
  %1659 = tail call float @llvm.nvvm.ex2.approx.f(float %1511) #7, !dbg !102
  br label %__nv_exp2f.exit206, !dbg !102

__nv_exp2f.exit206:                               ; preds = %1656, %1658
  %.0.i205 = phi float [ %1657, %1656 ], [ %1659, %1658 ], !dbg !102
  %1660 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i207 = icmp eq i32 %1660, 0, !dbg !102
  br i1 %.not.i207, label %1663, label %1661, !dbg !102

1661:                                             ; preds = %__nv_exp2f.exit206
  %1662 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1512) #7, !dbg !102
  br label %__nv_exp2f.exit209, !dbg !102

1663:                                             ; preds = %__nv_exp2f.exit206
  %1664 = tail call float @llvm.nvvm.ex2.approx.f(float %1512) #7, !dbg !102
  br label %__nv_exp2f.exit209, !dbg !102

__nv_exp2f.exit209:                               ; preds = %1661, %1663
  %.0.i208 = phi float [ %1662, %1661 ], [ %1664, %1663 ], !dbg !102
  %1665 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i210 = icmp eq i32 %1665, 0, !dbg !102
  br i1 %.not.i210, label %1668, label %1666, !dbg !102

1666:                                             ; preds = %__nv_exp2f.exit209
  %1667 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1513) #7, !dbg !102
  br label %__nv_exp2f.exit212, !dbg !102

1668:                                             ; preds = %__nv_exp2f.exit209
  %1669 = tail call float @llvm.nvvm.ex2.approx.f(float %1513) #7, !dbg !102
  br label %__nv_exp2f.exit212, !dbg !102

__nv_exp2f.exit212:                               ; preds = %1666, %1668
  %.0.i211 = phi float [ %1667, %1666 ], [ %1669, %1668 ], !dbg !102
  %1670 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !102
  %.not.i213 = icmp eq i32 %1670, 0, !dbg !102
  br i1 %.not.i213, label %1673, label %1671, !dbg !102

1671:                                             ; preds = %__nv_exp2f.exit212
  %1672 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1514) #7, !dbg !102
  br label %__nv_exp2f.exit215, !dbg !102

1673:                                             ; preds = %__nv_exp2f.exit212
  %1674 = tail call float @llvm.nvvm.ex2.approx.f(float %1514) #7, !dbg !102
  br label %__nv_exp2f.exit215, !dbg !102

__nv_exp2f.exit215:                               ; preds = %1671, %1673
  %.0.i214 = phi float [ %1672, %1671 ], [ %1674, %1673 ], !dbg !102
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !53
  %1675 = fadd float %.0.i121, %.0.i124, !dbg !54
  %1676 = fadd float %1675, %.0.i127, !dbg !54
  %1677 = fadd float %1676, %.0.i130, !dbg !54
  %1678 = fadd float %1677, %.0.i133, !dbg !54
  %1679 = fadd float %1678, %.0.i136, !dbg !54
  %1680 = fadd float %1679, %.0.i139, !dbg !54
  %1681 = fadd float %1680, %.0.i142, !dbg !54
  %1682 = fadd float %1681, %.0.i145, !dbg !54
  %1683 = fadd float %1682, %.0.i148, !dbg !54
  %1684 = fadd float %1683, %.0.i151, !dbg !54
  %1685 = fadd float %1684, %.0.i154, !dbg !54
  %1686 = fadd float %1685, %.0.i157, !dbg !54
  %1687 = fadd float %1686, %.0.i160, !dbg !54
  %1688 = fadd float %1687, %.0.i163, !dbg !54
  %1689 = fadd float %1688, %.0.i166, !dbg !54
  %1690 = fadd float %1689, %.0.i169, !dbg !54
  %1691 = fadd float %1690, %.0.i172, !dbg !54
  %1692 = fadd float %1691, %.0.i175, !dbg !54
  %1693 = fadd float %1692, %.0.i178, !dbg !54
  %1694 = fadd float %1693, %.0.i181, !dbg !54
  %1695 = fadd float %1694, %.0.i184, !dbg !54
  %1696 = fadd float %1695, %.0.i187, !dbg !54
  %1697 = fadd float %1696, %.0.i190, !dbg !54
  %1698 = fadd float %1697, %.0.i193, !dbg !54
  %1699 = fadd float %1698, %.0.i196, !dbg !54
  %1700 = fadd float %1699, %.0.i199, !dbg !54
  %1701 = fadd float %1700, %.0.i202, !dbg !54
  %1702 = fadd float %1701, %.0.i205, !dbg !54
  %1703 = fadd float %1702, %.0.i208, !dbg !54
  %1704 = fadd float %1703, %.0.i211, !dbg !54
  %1705 = fadd float %1704, %.0.i214, !dbg !54
  %1706 = bitcast float %1705 to i32, !dbg !53
  %1707 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1706, i32 16, i32 31), !dbg !53
  %1708 = bitcast i32 %1707 to float, !dbg !53
  %1709 = fadd float %1705, %1708, !dbg !54
  %1710 = bitcast float %1709 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1254, <1 x i32> %1710, i1 %1250) #7, !dbg !53
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !53
  %1711 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1227, i1 %1255) #7, !dbg !53
  %1712 = bitcast i32 %1711 to float, !dbg !53
  %1713 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1711, i32 1, i32 31), !dbg !53
  %1714 = bitcast i32 %1713 to float, !dbg !53
  %1715 = fadd float %1712, %1714, !dbg !54
  %1716 = bitcast float %1715 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1227, <1 x i32> %1716, i1 %1256) #7, !dbg !53
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !53
  %1717 = load float, ptr addrspace(3) %1257, align 8, !dbg !53
  %1718 = fsub float %1337, %1450, !dbg !103
  %1719 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !104
  %.not.i216 = icmp eq i32 %1719, 0, !dbg !104
  br i1 %.not.i216, label %1722, label %1720, !dbg !104

1720:                                             ; preds = %__nv_exp2f.exit215
  %1721 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %1718) #7, !dbg !104
  br label %__nv_exp2f.exit218, !dbg !104

1722:                                             ; preds = %__nv_exp2f.exit215
  %1723 = tail call float @llvm.nvvm.ex2.approx.f(float %1718) #7, !dbg !104
  br label %__nv_exp2f.exit218, !dbg !104

__nv_exp2f.exit218:                               ; preds = %1720, %1722
  %.0.i217 = phi float [ %1721, %1720 ], [ %1723, %1722 ], !dbg !104
  %1724 = fmul float %1338, %.0.i217, !dbg !105
  %1725 = fadd float %1717, %1724, !dbg !106
  %1726 = xor i1 %1336, true, !dbg !107
  %1727 = sext i1 %1726 to i32, !dbg !107
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230272), i32 %1727) #7, !dbg !78
  %1728 = tail call { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } asm sideeffect "tcgen05.ld.sync.aligned.16x32bx2.x32.b32 {$0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31}, [$32], 32;", "=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,r"(i32 %1333) #7, !dbg !78
  %1729 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 0, !dbg !78
  %1730 = bitcast i32 %1729 to float, !dbg !78
  %1731 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 1, !dbg !78
  %1732 = bitcast i32 %1731 to float, !dbg !78
  %1733 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 2, !dbg !78
  %1734 = bitcast i32 %1733 to float, !dbg !78
  %1735 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 3, !dbg !78
  %1736 = bitcast i32 %1735 to float, !dbg !78
  %1737 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 4, !dbg !78
  %1738 = bitcast i32 %1737 to float, !dbg !78
  %1739 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 5, !dbg !78
  %1740 = bitcast i32 %1739 to float, !dbg !78
  %1741 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 6, !dbg !78
  %1742 = bitcast i32 %1741 to float, !dbg !78
  %1743 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 7, !dbg !78
  %1744 = bitcast i32 %1743 to float, !dbg !78
  %1745 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 8, !dbg !78
  %1746 = bitcast i32 %1745 to float, !dbg !78
  %1747 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 9, !dbg !78
  %1748 = bitcast i32 %1747 to float, !dbg !78
  %1749 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 10, !dbg !78
  %1750 = bitcast i32 %1749 to float, !dbg !78
  %1751 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 11, !dbg !78
  %1752 = bitcast i32 %1751 to float, !dbg !78
  %1753 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 12, !dbg !78
  %1754 = bitcast i32 %1753 to float, !dbg !78
  %1755 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 13, !dbg !78
  %1756 = bitcast i32 %1755 to float, !dbg !78
  %1757 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 14, !dbg !78
  %1758 = bitcast i32 %1757 to float, !dbg !78
  %1759 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 15, !dbg !78
  %1760 = bitcast i32 %1759 to float, !dbg !78
  %1761 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 16, !dbg !78
  %1762 = bitcast i32 %1761 to float, !dbg !78
  %1763 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 17, !dbg !78
  %1764 = bitcast i32 %1763 to float, !dbg !78
  %1765 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 18, !dbg !78
  %1766 = bitcast i32 %1765 to float, !dbg !78
  %1767 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 19, !dbg !78
  %1768 = bitcast i32 %1767 to float, !dbg !78
  %1769 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 20, !dbg !78
  %1770 = bitcast i32 %1769 to float, !dbg !78
  %1771 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 21, !dbg !78
  %1772 = bitcast i32 %1771 to float, !dbg !78
  %1773 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 22, !dbg !78
  %1774 = bitcast i32 %1773 to float, !dbg !78
  %1775 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 23, !dbg !78
  %1776 = bitcast i32 %1775 to float, !dbg !78
  %1777 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 24, !dbg !78
  %1778 = bitcast i32 %1777 to float, !dbg !78
  %1779 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 25, !dbg !78
  %1780 = bitcast i32 %1779 to float, !dbg !78
  %1781 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 26, !dbg !78
  %1782 = bitcast i32 %1781 to float, !dbg !78
  %1783 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 27, !dbg !78
  %1784 = bitcast i32 %1783 to float, !dbg !78
  %1785 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 28, !dbg !78
  %1786 = bitcast i32 %1785 to float, !dbg !78
  %1787 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 29, !dbg !78
  %1788 = bitcast i32 %1787 to float, !dbg !78
  %1789 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 30, !dbg !78
  %1790 = bitcast i32 %1789 to float, !dbg !78
  %1791 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1728, 31, !dbg !78
  %1792 = bitcast i32 %1791 to float, !dbg !78
  tail call void asm sideeffect "tcgen05.wait::ld.sync.aligned;", ""() #7, !dbg !78
  tail call void asm sideeffect "@$1 mbarrier.arrive.shared.b64 _, [$0];", "r,b"(i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230416) to i32), i1 true) #7, !dbg !78
  %1793 = fmul float %.0.i217, %1730, !dbg !108
  %1794 = fmul float %.0.i217, %1732, !dbg !108
  %1795 = fmul float %.0.i217, %1734, !dbg !108
  %1796 = fmul float %.0.i217, %1736, !dbg !108
  %1797 = fmul float %.0.i217, %1738, !dbg !108
  %1798 = fmul float %.0.i217, %1740, !dbg !108
  %1799 = fmul float %.0.i217, %1742, !dbg !108
  %1800 = fmul float %.0.i217, %1744, !dbg !108
  %1801 = fmul float %.0.i217, %1746, !dbg !108
  %1802 = fmul float %.0.i217, %1748, !dbg !108
  %1803 = fmul float %.0.i217, %1750, !dbg !108
  %1804 = fmul float %.0.i217, %1752, !dbg !108
  %1805 = fmul float %.0.i217, %1754, !dbg !108
  %1806 = fmul float %.0.i217, %1756, !dbg !108
  %1807 = fmul float %.0.i217, %1758, !dbg !108
  %1808 = fmul float %.0.i217, %1760, !dbg !108
  %1809 = fmul float %.0.i217, %1762, !dbg !108
  %1810 = fmul float %.0.i217, %1764, !dbg !108
  %1811 = fmul float %.0.i217, %1766, !dbg !108
  %1812 = fmul float %.0.i217, %1768, !dbg !108
  %1813 = fmul float %.0.i217, %1770, !dbg !108
  %1814 = fmul float %.0.i217, %1772, !dbg !108
  %1815 = fmul float %.0.i217, %1774, !dbg !108
  %1816 = fmul float %.0.i217, %1776, !dbg !108
  %1817 = fmul float %.0.i217, %1778, !dbg !108
  %1818 = fmul float %.0.i217, %1780, !dbg !108
  %1819 = fmul float %.0.i217, %1782, !dbg !108
  %1820 = fmul float %.0.i217, %1784, !dbg !108
  %1821 = fmul float %.0.i217, %1786, !dbg !108
  %1822 = fmul float %.0.i217, %1788, !dbg !108
  %1823 = fmul float %.0.i217, %1790, !dbg !108
  %1824 = fmul float %.0.i217, %1792, !dbg !108
  %1825 = insertelement <8 x float> poison, float %.0.i121, i64 0, !dbg !107
  %1826 = insertelement <8 x float> %1825, float %.0.i124, i64 1, !dbg !107
  %1827 = insertelement <8 x float> %1826, float %.0.i127, i64 2, !dbg !107
  %1828 = insertelement <8 x float> %1827, float %.0.i130, i64 3, !dbg !107
  %1829 = insertelement <8 x float> %1828, float %.0.i133, i64 4, !dbg !107
  %1830 = insertelement <8 x float> %1829, float %.0.i136, i64 5, !dbg !107
  %1831 = insertelement <8 x float> %1830, float %.0.i139, i64 6, !dbg !107
  %1832 = insertelement <8 x float> %1831, float %.0.i142, i64 7, !dbg !107
  %1833 = fptrunc <8 x float> %1832 to <8 x bfloat>, !dbg !107
  %1834 = insertelement <8 x float> poison, float %.0.i145, i64 0, !dbg !107
  %1835 = insertelement <8 x float> %1834, float %.0.i148, i64 1, !dbg !107
  %1836 = insertelement <8 x float> %1835, float %.0.i151, i64 2, !dbg !107
  %1837 = insertelement <8 x float> %1836, float %.0.i154, i64 3, !dbg !107
  %1838 = insertelement <8 x float> %1837, float %.0.i157, i64 4, !dbg !107
  %1839 = insertelement <8 x float> %1838, float %.0.i160, i64 5, !dbg !107
  %1840 = insertelement <8 x float> %1839, float %.0.i163, i64 6, !dbg !107
  %1841 = insertelement <8 x float> %1840, float %.0.i166, i64 7, !dbg !107
  %1842 = fptrunc <8 x float> %1841 to <8 x bfloat>, !dbg !107
  %1843 = insertelement <8 x float> poison, float %.0.i169, i64 0, !dbg !107
  %1844 = insertelement <8 x float> %1843, float %.0.i172, i64 1, !dbg !107
  %1845 = insertelement <8 x float> %1844, float %.0.i175, i64 2, !dbg !107
  %1846 = insertelement <8 x float> %1845, float %.0.i178, i64 3, !dbg !107
  %1847 = insertelement <8 x float> %1846, float %.0.i181, i64 4, !dbg !107
  %1848 = insertelement <8 x float> %1847, float %.0.i184, i64 5, !dbg !107
  %1849 = insertelement <8 x float> %1848, float %.0.i187, i64 6, !dbg !107
  %1850 = insertelement <8 x float> %1849, float %.0.i190, i64 7, !dbg !107
  %1851 = fptrunc <8 x float> %1850 to <8 x bfloat>, !dbg !107
  %1852 = insertelement <8 x float> poison, float %.0.i193, i64 0, !dbg !107
  %1853 = insertelement <8 x float> %1852, float %.0.i196, i64 1, !dbg !107
  %1854 = insertelement <8 x float> %1853, float %.0.i199, i64 2, !dbg !107
  %1855 = insertelement <8 x float> %1854, float %.0.i202, i64 3, !dbg !107
  %1856 = insertelement <8 x float> %1855, float %.0.i205, i64 4, !dbg !107
  %1857 = insertelement <8 x float> %1856, float %.0.i208, i64 5, !dbg !107
  %1858 = insertelement <8 x float> %1857, float %.0.i211, i64 6, !dbg !107
  %1859 = insertelement <8 x float> %1858, float %.0.i214, i64 7, !dbg !107
  %1860 = fptrunc <8 x float> %1859 to <8 x bfloat>, !dbg !107
  tail call void asm sideeffect "{                                                           \0A\09.reg .pred P1;                                              \0A\09waitLoop:                                                   \0A\09mbarrier.try_wait.parity.shared.b64 P1, [$0], $1;           \0A\09@!P1 bra.uni waitLoop;                                      \0A\09}                                                           \0A\09", "r,r"(ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230256), i32 %1727) #7, !dbg !107
  store <8 x bfloat> %1833, ptr addrspace(3) %1273, align 16, !dbg !107
  store <8 x bfloat> %1842, ptr addrspace(3) %1275, align 16, !dbg !107
  store <8 x bfloat> %1851, ptr addrspace(3) %1283, align 16, !dbg !107
  store <8 x bfloat> %1860, ptr addrspace(3) %1285, align 16, !dbg !107
  tail call void asm sideeffect "@$1 cp.async.mbarrier.arrive.noinc.shared.b64 [$0];", "r,b"(i32 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230432) to i32), i1 true) #7, !dbg !107
  tail call void asm sideeffect "@$0 tcgen05.st.sync.aligned.16x32bx2.x32.b32 [$1], 32, {$2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33};", "b,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r,r"(i1 true, i32 %1333, float %1793, float %1794, float %1795, float %1796, float %1797, float %1798, float %1799, float %1800, float %1801, float %1802, float %1803, float %1804, float %1805, float %1806, float %1807, float %1808, float %1809, float %1810, float %1811, float %1812, float %1813, float %1814, float %1815, float %1816, float %1817, float %1818, float %1819, float %1820, float %1821, float %1822, float %1823, float %1824) #7, !dbg !78
  tail call void asm sideeffect "tcgen05.wait::st.sync.aligned;", ""() #7, !dbg !78
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !78
  %1861 = add i32 %1339, 128, !dbg !44
  %1862 = icmp slt i32 %1861, %20, !dbg !44
  br i1 %1862, label %1335, label %._crit_edge302, !dbg !44

._crit_edge302:                                   ; preds = %__nv_exp2f.exit218, %1297
  %.lcssa259 = phi float [ 1.000000e+00, %1297 ], [ %1725, %__nv_exp2f.exit218 ], !dbg !109
  %.lcssa258 = phi float [ 0xFFF0000000000000, %1297 ], [ %1450, %__nv_exp2f.exit218 ], !dbg !110
  %.lcssa = phi i1 [ %1298, %1297 ], [ %1726, %__nv_exp2f.exit218 ], !dbg !111
  %1863 = fcmp olt float %.lcssa259, 0x3810000000000000, !dbg !112
  %1864 = fmul float %.lcssa259, 0x4160000000000000, !dbg !112
  %.02.i221 = select i1 %1863, float %1864, float %.lcssa259, !dbg !112
  %i.i.0.i222 = select i1 %1863, float -2.300000e+01, float 0.000000e+00, !dbg !112
  %1865 = bitcast float %.02.i221 to i32, !dbg !112
  %1866 = add i32 %1865, -1060439283, !dbg !112
  %1867 = and i32 %1866, -8388608, !dbg !112
  %1868 = sub i32 %1865, %1867, !dbg !112
  %1869 = bitcast i32 %1868 to float, !dbg !112
  %1870 = sitofp i32 %1867 to float, !dbg !112
  %1871 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !112
  %.not.i223 = icmp eq i32 %1871, 0, !dbg !112
  %1872 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1870, float 0x3E80000000000000, float %i.i.0.i222) #7, !dbg !112
  %1873 = tail call float @llvm.nvvm.fma.rn.f(float %1870, float 0x3E80000000000000, float %i.i.0.i222) #7, !dbg !112
  %.08.i224 = select i1 %.not.i223, float %1873, float %1872, !dbg !112
  %1874 = fadd float %1869, -1.000000e+00, !dbg !112
  %1875 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !112
  %.not1.i225 = icmp eq i32 %1875, 0, !dbg !112
  %1876 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3FB8D64FE0000000, float %1874, float 0xBFC58FE600000000) #7, !dbg !112
  %1877 = tail call float @llvm.nvvm.fma.rn.f(float 0x3FB8D64FE0000000, float %1874, float 0xBFC58FE600000000) #7, !dbg !112
  %.010.i226 = select i1 %.not1.i225, float %1877, float %1876, !dbg !112
  %1878 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !112
  %.not2.i227 = icmp eq i32 %1878, 0, !dbg !112
  %1879 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i226, float %1874, float 0x3FC5F9E540000000) #7, !dbg !112
  %1880 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i226, float %1874, float 0x3FC5F9E540000000) #7, !dbg !112
  %.011.i228 = select i1 %.not2.i227, float %1880, float %1879, !dbg !112
  %1881 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !112
  %.not3.i229 = icmp eq i32 %1881, 0, !dbg !112
  %1882 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i228, float %1874, float 0xBFC6E9C860000000) #7, !dbg !112
  %1883 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i228, float %1874, float 0xBFC6E9C860000000) #7, !dbg !112
  %.012.i230 = select i1 %.not3.i229, float %1883, float %1882, !dbg !112
  %1884 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !112
  %.not4.i231 = icmp eq i32 %1884, 0, !dbg !112
  %1885 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i230, float %1874, float 0x3FCA417E80000000) #7, !dbg !112
  %1886 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i230, float %1874, float 0x3FCA417E80000000) #7, !dbg !112
  %.09.i232 = select i1 %.not4.i231, float %1886, float %1885, !dbg !112
  %1887 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !112
  %.not5.i233 = icmp eq i32 %1887, 0, !dbg !112
  %1888 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i232, float %1874, float 0xBFCEC79160000000) #7, !dbg !112
  %1889 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i232, float %1874, float 0xBFCEC79160000000) #7, !dbg !112
  %.05.i234 = select i1 %.not5.i233, float %1889, float %1888, !dbg !112
  %1890 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !112
  %.not6.i235 = icmp eq i32 %1890, 0, !dbg !112
  %1891 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i234, float %1874, float 0x3FD277F320000000) #7, !dbg !112
  %1892 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i234, float %1874, float 0x3FD277F320000000) #7, !dbg !112
  %.01.i236 = select i1 %.not6.i235, float %1892, float %1891, !dbg !112
  %1893 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !112
  %.not7.i237 = icmp eq i32 %1893, 0, !dbg !112
  %1894 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i236, float %1874, float 0xBFD7154920000000) #7, !dbg !112
  %1895 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i236, float %1874, float 0xBFD7154920000000) #7, !dbg !112
  %.0.i238 = select i1 %.not7.i237, float %1895, float %1894, !dbg !112
  %1896 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !112
  %.not8.i239 = icmp eq i32 %1896, 0, !dbg !112
  %1897 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i238, float %1874, float 0x3FDEC70940000000) #7, !dbg !112
  %1898 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i238, float %1874, float 0x3FDEC70940000000) #7, !dbg !112
  %.07.i240 = select i1 %.not8.i239, float %1898, float %1897, !dbg !112
  %1899 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !112
  %.not9.i241 = icmp eq i32 %1899, 0, !dbg !112
  %1900 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i240, float %1874, float 0xBFE7154760000000) #7, !dbg !112
  %1901 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i240, float %1874, float 0xBFE7154760000000) #7, !dbg !112
  %.06.i242 = select i1 %.not9.i241, float %1901, float %1900, !dbg !112
  %1902 = fmul float %1874, %.06.i242, !dbg !112
  %1903 = fmul float %1874, %1902, !dbg !112
  %1904 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !112
  %.not10.i243 = icmp eq i32 %1904, 0, !dbg !112
  %1905 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %1874, float 0x3FF7154760000000, float %1903) #7, !dbg !112
  %1906 = tail call float @llvm.nvvm.fma.rn.f(float %1874, float 0x3FF7154760000000, float %1903) #7, !dbg !112
  %.04.i244 = select i1 %.not10.i243, float %1906, float %1905, !dbg !112
  %1907 = fadd float %.08.i224, %.04.i244, !dbg !112
  %1908 = icmp ugt i32 %1865, 2139095039, !dbg !112
  br i1 %1908, label %__nv_fmaf_rn.exit.i.i247, label %__nv_log2f.exit250, !dbg !112

__nv_fmaf_rn.exit.i.i247:                         ; preds = %._crit_edge302
  %1909 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #7, !dbg !112
  %.not11.i248 = icmp eq i32 %1909, 0, !dbg !112
  %1910 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i221, float 0x7FF0000000000000, float 0x7FF0000000000000) #7, !dbg !112
  %1911 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i221, float 0x7FF0000000000000, float 0x7FF0000000000000) #7, !dbg !112
  %.03.i249 = select i1 %.not11.i248, float %1911, float %1910, !dbg !112
  br label %__nv_log2f.exit250, !dbg !112

__nv_log2f.exit250:                               ; preds = %._crit_edge302, %__nv_fmaf_rn.exit.i.i247
  %r.i.0.i245 = phi float [ %.03.i249, %__nv_fmaf_rn.exit.i.i247 ], [ %1907, %._crit_edge302 ], !dbg !112
  %1912 = fcmp oeq float %.02.i221, 0.000000e+00, !dbg !112
  %r.i.1.i246 = select i1 %1912, float 0xFFF0000000000000, float %r.i.0.i245, !dbg !112
  %1913 = fadd float %.lcssa258, %r.i.1.i246, !dbg !113
  %1914 = tail call { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } asm sideeffect "tcgen05.ld.sync.aligned.16x32bx2.x32.b32 {$0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31}, [$32], 32;", "=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,=r,r"(i32 %1333) #7, !dbg !78
  %1915 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 0, !dbg !78
  %1916 = bitcast i32 %1915 to float, !dbg !78
  %1917 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 1, !dbg !78
  %1918 = bitcast i32 %1917 to float, !dbg !78
  %1919 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 2, !dbg !78
  %1920 = bitcast i32 %1919 to float, !dbg !78
  %1921 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 3, !dbg !78
  %1922 = bitcast i32 %1921 to float, !dbg !78
  %1923 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 4, !dbg !78
  %1924 = bitcast i32 %1923 to float, !dbg !78
  %1925 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 5, !dbg !78
  %1926 = bitcast i32 %1925 to float, !dbg !78
  %1927 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 6, !dbg !78
  %1928 = bitcast i32 %1927 to float, !dbg !78
  %1929 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 7, !dbg !78
  %1930 = bitcast i32 %1929 to float, !dbg !78
  %1931 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 8, !dbg !78
  %1932 = bitcast i32 %1931 to float, !dbg !78
  %1933 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 9, !dbg !78
  %1934 = bitcast i32 %1933 to float, !dbg !78
  %1935 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 10, !dbg !78
  %1936 = bitcast i32 %1935 to float, !dbg !78
  %1937 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 11, !dbg !78
  %1938 = bitcast i32 %1937 to float, !dbg !78
  %1939 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 12, !dbg !78
  %1940 = bitcast i32 %1939 to float, !dbg !78
  %1941 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 13, !dbg !78
  %1942 = bitcast i32 %1941 to float, !dbg !78
  %1943 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 14, !dbg !78
  %1944 = bitcast i32 %1943 to float, !dbg !78
  %1945 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 15, !dbg !78
  %1946 = bitcast i32 %1945 to float, !dbg !78
  %1947 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 16, !dbg !78
  %1948 = bitcast i32 %1947 to float, !dbg !78
  %1949 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 17, !dbg !78
  %1950 = bitcast i32 %1949 to float, !dbg !78
  %1951 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 18, !dbg !78
  %1952 = bitcast i32 %1951 to float, !dbg !78
  %1953 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 19, !dbg !78
  %1954 = bitcast i32 %1953 to float, !dbg !78
  %1955 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 20, !dbg !78
  %1956 = bitcast i32 %1955 to float, !dbg !78
  %1957 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 21, !dbg !78
  %1958 = bitcast i32 %1957 to float, !dbg !78
  %1959 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 22, !dbg !78
  %1960 = bitcast i32 %1959 to float, !dbg !78
  %1961 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 23, !dbg !78
  %1962 = bitcast i32 %1961 to float, !dbg !78
  %1963 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 24, !dbg !78
  %1964 = bitcast i32 %1963 to float, !dbg !78
  %1965 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 25, !dbg !78
  %1966 = bitcast i32 %1965 to float, !dbg !78
  %1967 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 26, !dbg !78
  %1968 = bitcast i32 %1967 to float, !dbg !78
  %1969 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 27, !dbg !78
  %1970 = bitcast i32 %1969 to float, !dbg !78
  %1971 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 28, !dbg !78
  %1972 = bitcast i32 %1971 to float, !dbg !78
  %1973 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 29, !dbg !78
  %1974 = bitcast i32 %1973 to float, !dbg !78
  %1975 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 30, !dbg !78
  %1976 = bitcast i32 %1975 to float, !dbg !78
  %1977 = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %1914, 31, !dbg !78
  %1978 = bitcast i32 %1977 to float, !dbg !78
  tail call void asm sideeffect "tcgen05.wait::ld.sync.aligned;", ""() #7, !dbg !78
  %1979 = tail call float @llvm.nvvm.div.full(float %1916, float %.lcssa259), !dbg !114
  %1980 = tail call float @llvm.nvvm.div.full(float %1918, float %.lcssa259), !dbg !114
  %1981 = tail call float @llvm.nvvm.div.full(float %1920, float %.lcssa259), !dbg !114
  %1982 = tail call float @llvm.nvvm.div.full(float %1922, float %.lcssa259), !dbg !114
  %1983 = tail call float @llvm.nvvm.div.full(float %1924, float %.lcssa259), !dbg !114
  %1984 = tail call float @llvm.nvvm.div.full(float %1926, float %.lcssa259), !dbg !114
  %1985 = tail call float @llvm.nvvm.div.full(float %1928, float %.lcssa259), !dbg !114
  %1986 = tail call float @llvm.nvvm.div.full(float %1930, float %.lcssa259), !dbg !114
  %1987 = tail call float @llvm.nvvm.div.full(float %1932, float %.lcssa259), !dbg !114
  %1988 = tail call float @llvm.nvvm.div.full(float %1934, float %.lcssa259), !dbg !114
  %1989 = tail call float @llvm.nvvm.div.full(float %1936, float %.lcssa259), !dbg !114
  %1990 = tail call float @llvm.nvvm.div.full(float %1938, float %.lcssa259), !dbg !114
  %1991 = tail call float @llvm.nvvm.div.full(float %1940, float %.lcssa259), !dbg !114
  %1992 = tail call float @llvm.nvvm.div.full(float %1942, float %.lcssa259), !dbg !114
  %1993 = tail call float @llvm.nvvm.div.full(float %1944, float %.lcssa259), !dbg !114
  %1994 = tail call float @llvm.nvvm.div.full(float %1946, float %.lcssa259), !dbg !114
  %1995 = tail call float @llvm.nvvm.div.full(float %1948, float %.lcssa259), !dbg !114
  %1996 = tail call float @llvm.nvvm.div.full(float %1950, float %.lcssa259), !dbg !114
  %1997 = tail call float @llvm.nvvm.div.full(float %1952, float %.lcssa259), !dbg !114
  %1998 = tail call float @llvm.nvvm.div.full(float %1954, float %.lcssa259), !dbg !114
  %1999 = tail call float @llvm.nvvm.div.full(float %1956, float %.lcssa259), !dbg !114
  %2000 = tail call float @llvm.nvvm.div.full(float %1958, float %.lcssa259), !dbg !114
  %2001 = tail call float @llvm.nvvm.div.full(float %1960, float %.lcssa259), !dbg !114
  %2002 = tail call float @llvm.nvvm.div.full(float %1962, float %.lcssa259), !dbg !114
  %2003 = tail call float @llvm.nvvm.div.full(float %1964, float %.lcssa259), !dbg !114
  %2004 = tail call float @llvm.nvvm.div.full(float %1966, float %.lcssa259), !dbg !114
  %2005 = tail call float @llvm.nvvm.div.full(float %1968, float %.lcssa259), !dbg !114
  %2006 = tail call float @llvm.nvvm.div.full(float %1970, float %.lcssa259), !dbg !114
  %2007 = tail call float @llvm.nvvm.div.full(float %1972, float %.lcssa259), !dbg !114
  %2008 = tail call float @llvm.nvvm.div.full(float %1974, float %.lcssa259), !dbg !114
  %2009 = tail call float @llvm.nvvm.div.full(float %1976, float %.lcssa259), !dbg !114
  %2010 = tail call float @llvm.nvvm.div.full(float %1978, float %.lcssa259), !dbg !114
  %2011 = mul i32 %1301, %20, !dbg !115
  %2012 = sext i32 %2011 to i64, !dbg !116
  %2013 = getelementptr float, ptr addrspace(1) %4, i64 %2012, !dbg !116
  %2014 = sext i32 %1312 to i64, !dbg !117
  %2015 = getelementptr float, ptr addrspace(1) %2013, i64 %2014, !dbg !117
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !118
  %2016 = bitcast float %1913 to <1 x i32>, !dbg !118
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1289, <1 x i32> %2016, i1 true) #7, !dbg !118
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !118
  %2017 = load i32, ptr addrspace(3) %1290, align 4, !dbg !118
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %2017, ptr addrspace(1) %2015, i1 %1292) #7, !dbg !118
  %2018 = sdiv i64 %1310, %1237, !dbg !94
  %2019 = trunc i64 %2018 to i32, !dbg !119
  %2020 = add i32 %1311, %2019, !dbg !119
  %2021 = insertelement <8 x float> poison, float %1979, i64 0, !dbg !120
  %2022 = insertelement <8 x float> %2021, float %1980, i64 1, !dbg !120
  %2023 = insertelement <8 x float> %2022, float %1981, i64 2, !dbg !120
  %2024 = insertelement <8 x float> %2023, float %1982, i64 3, !dbg !120
  %2025 = insertelement <8 x float> %2024, float %1983, i64 4, !dbg !120
  %2026 = insertelement <8 x float> %2025, float %1984, i64 5, !dbg !120
  %2027 = insertelement <8 x float> %2026, float %1985, i64 6, !dbg !120
  %2028 = insertelement <8 x float> %2027, float %1986, i64 7, !dbg !120
  %2029 = fptrunc <8 x float> %2028 to <8 x bfloat>, !dbg !120
  %2030 = insertelement <8 x float> poison, float %1987, i64 0, !dbg !120
  %2031 = insertelement <8 x float> %2030, float %1988, i64 1, !dbg !120
  %2032 = insertelement <8 x float> %2031, float %1989, i64 2, !dbg !120
  %2033 = insertelement <8 x float> %2032, float %1990, i64 3, !dbg !120
  %2034 = insertelement <8 x float> %2033, float %1991, i64 4, !dbg !120
  %2035 = insertelement <8 x float> %2034, float %1992, i64 5, !dbg !120
  %2036 = insertelement <8 x float> %2035, float %1993, i64 6, !dbg !120
  %2037 = insertelement <8 x float> %2036, float %1994, i64 7, !dbg !120
  %2038 = fptrunc <8 x float> %2037 to <8 x bfloat>, !dbg !120
  %2039 = insertelement <8 x float> poison, float %1995, i64 0, !dbg !120
  %2040 = insertelement <8 x float> %2039, float %1996, i64 1, !dbg !120
  %2041 = insertelement <8 x float> %2040, float %1997, i64 2, !dbg !120
  %2042 = insertelement <8 x float> %2041, float %1998, i64 3, !dbg !120
  %2043 = insertelement <8 x float> %2042, float %1999, i64 4, !dbg !120
  %2044 = insertelement <8 x float> %2043, float %2000, i64 5, !dbg !120
  %2045 = insertelement <8 x float> %2044, float %2001, i64 6, !dbg !120
  %2046 = insertelement <8 x float> %2045, float %2002, i64 7, !dbg !120
  %2047 = fptrunc <8 x float> %2046 to <8 x bfloat>, !dbg !120
  %2048 = insertelement <8 x float> poison, float %2003, i64 0, !dbg !120
  %2049 = insertelement <8 x float> %2048, float %2004, i64 1, !dbg !120
  %2050 = insertelement <8 x float> %2049, float %2005, i64 2, !dbg !120
  %2051 = insertelement <8 x float> %2050, float %2006, i64 3, !dbg !120
  %2052 = insertelement <8 x float> %2051, float %2007, i64 4, !dbg !120
  %2053 = insertelement <8 x float> %2052, float %2008, i64 5, !dbg !120
  %2054 = insertelement <8 x float> %2053, float %2009, i64 6, !dbg !120
  %2055 = insertelement <8 x float> %2054, float %2010, i64 7, !dbg !120
  %2056 = fptrunc <8 x float> %2055 to <8 x bfloat>, !dbg !120
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !121
  store <8 x bfloat> %2029, ptr addrspace(3) %1293, align 16, !dbg !121
  store <8 x bfloat> %2038, ptr addrspace(3) %1294, align 16, !dbg !121
  store <8 x bfloat> %2047, ptr addrspace(3) %1295, align 16, !dbg !121
  store <8 x bfloat> %2056, ptr addrspace(3) %1296, align 16, !dbg !121
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #7, !dbg !121
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !121
  %2057 = tail call { i32, i1 } @llvm.nvvm.elect.sync(i32 -1), !dbg !121
  %2058 = extractvalue { i32, i1 } %2057, 1, !dbg !121
  %2059 = and i1 %1246, %2058, !dbg !121
  %2060 = getelementptr bfloat, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 196608), i32 %1322, !dbg !121
  tail call void asm sideeffect "@$0 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [$1, {$2, $3}], [$4];", "b,l,r,r,r"(i1 %2059, ptr addrspace(1) %1230, i32 %1324, i32 %2020, ptr addrspace(3) %2060) #7, !dbg !121
  tail call void @llvm.nvvm.cp.async.bulk.commit.group(), !dbg !121
  tail call void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 0), !dbg !121
  tail call void asm sideeffect "barrier.sync.aligned 0, 256 ;", ""() #7, !dbg !121
  %2061 = add i32 %1300, %1207, !dbg !74
  %2062 = add nuw nsw i32 %1299, 1, !dbg !33
  %exitcond323.not = icmp eq i32 %2062, %1214, !dbg !33
  br i1 %exitcond323.not, label %._crit_edge308, label %1297, !dbg !33

._crit_edge308:                                   ; preds = %__nv_log2f.exit250, %1192
  tail call void asm sideeffect "barrier.sync 1 ;", ""() #7, !dbg !8
  tail call void @llvm.nvvm.setmaxnreg.inc.sync.aligned.u32(i32 200), !dbg !8
  tail call void asm sideeffect "@$0 tcgen05.dealloc.cta_group::1.sync.aligned.b32 $1, 256;", "b,r"(i1 %1193, ptr addrspace(6) %1195) #7, !dbg !122
  tail call void @llvm.memset.p3.i64(ptr addrspace(3) noundef align 16 dereferenceable(12) getelementptr (i8, ptr addrspace(3) @global_smem, i32 230208), i8 5, i64 12, i1 false), !dbg !122
  tail call void asm sideeffect "barrier.sync 1 ;", ""() #7, !dbg !122
  br label %common.ret, !dbg !122
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.nvvm.setmaxnreg.dec.sync.aligned.u32(i32 immarg) #3

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.nvvm.setmaxnreg.inc.sync.aligned.u32(i32 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.nctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.z() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.nctaid.y() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.bar.warp.sync(i32) #4

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare { i32, i1 } @llvm.nvvm.elect.sync(i32) #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #6

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.bulk.commit.group() #7

; Function Attrs: nounwind
declare void @llvm.nvvm.cp.async.bulk.wait.group.read(i32 immarg) #7

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #8

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p3.i64(ptr addrspace(3) writeonly captures(none), i8, i64, i1 immarg) #9

attributes #0 = { "nvvm.maxnreg"="96" "nvvm.reqntid"="640" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn }
attributes #4 = { convergent nocallback nounwind }
attributes #5 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #6 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #7 = { nounwind }
attributes #8 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nocallback nofree nounwind willreturn memory(argmem: write) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "triton_fused_attention.py", directory: "/home/mren/OpenSource2/tritonbench/tritonbench/kernels")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "_attn_fwd_tma_ws_persistent", linkageName: "_attn_fwd_tma_ws_persistent", scope: !1, file: !1, line: 1556, type: !6, scopeLine: 1556, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 1556, scope: !5)
!9 = !DILocation(line: 0, scope: !5)
!10 = !DILocation(line: 40, column: 22, scope: !11, inlinedAt: !13)
!11 = distinct !DILexicalBlockFile(scope: !5, file: !12, discriminator: 0)
!12 = !DIFile(filename: "standard.py", directory: "/home/mren/MetaMain3/triton/python/triton/language")
!13 = !DILocation(line: 1602, column: 32, scope: !5)
!14 = !DILocation(line: 40, column: 28, scope: !11, inlinedAt: !13)
!15 = !DILocation(line: 1603, column: 28, scope: !5)
!16 = !DILocation(line: 1604, column: 32, scope: !5)
!17 = !DILocation(line: 1605, column: 31, scope: !5)
!18 = !DILocation(line: 1605, column: 35, scope: !5)
!19 = !DILocation(line: 1607, column: 34, scope: !5)
!20 = !DILocation(line: 1608, column: 31, scope: !5)
!21 = !DILocation(line: 1608, column: 17, scope: !5)
!22 = !DILocation(line: 1608, column: 7, scope: !5)
!23 = !DILocation(line: 1615, column: 23, scope: !5)
!24 = !DILocation(line: 1635, column: 8, scope: !5)
!25 = !DILocation(line: 1641, column: 8, scope: !5)
!26 = !DILocation(line: 881, column: 71, scope: !27, inlinedAt: !28)
!27 = distinct !DILexicalBlockFile(scope: !5, file: !1, discriminator: 0)
!28 = !DILocation(line: 1697, column: 12, scope: !5)
!29 = !DILocation(line: 923, column: 47, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 935, column: 16, scope: !27, inlinedAt: !28)
!31 = !DILocation(line: 948, column: 32, scope: !27, inlinedAt: !28)
!32 = !DILocation(line: 1049, column: 32, scope: !27, inlinedAt: !28)
!33 = !DILocation(line: 1647, column: 39, scope: !5)
!34 = !DILocation(line: 1652, column: 29, scope: !5)
!35 = !DILocation(line: 1651, column: 25, scope: !5)
!36 = !DILocation(line: 879, column: 22, scope: !27, inlinedAt: !28)
!37 = !DILocation(line: 880, column: 21, scope: !27, inlinedAt: !28)
!38 = !DILocation(line: 881, column: 59, scope: !27, inlinedAt: !28)
!39 = !DILocation(line: 881, column: 50, scope: !27, inlinedAt: !28)
!40 = !DILocation(line: 923, column: 24, scope: !27, inlinedAt: !28)
!41 = !DILocation(line: 948, column: 81, scope: !27, inlinedAt: !28)
!42 = !DILocation(line: 948, column: 16, scope: !27, inlinedAt: !28)
!43 = !DILocation(line: 345, column: 33, scope: !27, inlinedAt: !28)
!44 = !DILocation(line: 266, column: 36, scope: !27, inlinedAt: !28)
!45 = !DILocation(line: 281, column: 29, scope: !27, inlinedAt: !28)
!46 = !DILocation(line: 188, column: 40, scope: !11, inlinedAt: !28)
!47 = !DILocation(line: 167, column: 27, scope: !11, inlinedAt: !28)
!48 = !DILocation(line: 312, column: 58, scope: !27, inlinedAt: !28)
!49 = !DILocation(line: 312, column: 41, scope: !27, inlinedAt: !28)
!50 = !DILocation(line: 313, column: 28, scope: !27, inlinedAt: !28)
!51 = !DILocation(line: 313, column: 39, scope: !27, inlinedAt: !28)
!52 = !DILocation(line: 314, column: 30, scope: !27, inlinedAt: !28)
!53 = !DILocation(line: 290, column: 36, scope: !11, inlinedAt: !28)
!54 = !DILocation(line: 260, column: 15, scope: !11, inlinedAt: !28)
!55 = !DILocation(line: 317, column: 41, scope: !27, inlinedAt: !28)
!56 = !DILocation(line: 317, column: 34, scope: !27, inlinedAt: !28)
!57 = !DILocation(line: 318, column: 26, scope: !27, inlinedAt: !28)
!58 = !DILocation(line: 318, column: 35, scope: !27, inlinedAt: !28)
!59 = !DILocation(line: 325, column: 27, scope: !27, inlinedAt: !28)
!60 = !DILocation(line: 320, column: 26, scope: !27, inlinedAt: !28)
!61 = !DILocation(line: 404, column: 84, scope: !5)
!62 = !DILocation(line: 404, column: 102, scope: !5)
!63 = !DILocation(line: 404, column: 120, scope: !5)
!64 = !DILocation(line: 1043, column: 29, scope: !27, inlinedAt: !28)
!65 = !DILocation(line: 1043, column: 16, scope: !27, inlinedAt: !28)
!66 = !DILocation(line: 1044, column: 22, scope: !27, inlinedAt: !28)
!67 = !DILocation(line: 1045, column: 31, scope: !27, inlinedAt: !28)
!68 = !DILocation(line: 1045, column: 22, scope: !27, inlinedAt: !28)
!69 = !DILocation(line: 1045, column: 39, scope: !27, inlinedAt: !28)
!70 = !DILocation(line: 1046, column: 26, scope: !27, inlinedAt: !28)
!71 = !DILocation(line: 1049, column: 81, scope: !27, inlinedAt: !28)
!72 = !DILocation(line: 1050, column: 24, scope: !27, inlinedAt: !28)
!73 = !DILocation(line: 1050, column: 16, scope: !27, inlinedAt: !28)
!74 = !DILocation(line: 1699, column: 20, scope: !5)
!75 = !DILocation(line: 272, column: 20, scope: !27, inlinedAt: !28)
!76 = !DILocation(line: 280, column: 29, scope: !27, inlinedAt: !28)
!77 = !DILocation(line: 524, column: 81, scope: !5)
!78 = !DILocation(line: 344, column: 33, scope: !27, inlinedAt: !28)
!79 = !DILocation(line: 336, column: 24, scope: !27, inlinedAt: !28)
!80 = !DILocation(line: 598, column: 81, scope: !5)
!81 = !DILocation(line: 1614, column: 8, scope: !5)
!82 = !DILocation(line: 881, column: 38, scope: !27, inlinedAt: !28)
!83 = !DILocation(line: 272, column: 59, scope: !27, inlinedAt: !28)
!84 = !DILocation(line: 881, column: 26, scope: !27, inlinedAt: !28)
!85 = !DILocation(line: 272, column: 44, scope: !27, inlinedAt: !28)
!86 = !DILocation(line: 694, column: 81, scope: !5)
!87 = !DILocation(line: 1628, column: 12, scope: !5)
!88 = !DILocation(line: 336, column: 40, scope: !27, inlinedAt: !28)
!89 = !DILocation(line: 336, column: 64, scope: !27, inlinedAt: !28)
!90 = !DILocation(line: 764, column: 81, scope: !5)
!91 = distinct !{!91, !92}
!92 = !{!"llvm.licm.disable"}
!93 = !DILocation(line: 941, column: 32, scope: !27, inlinedAt: !28)
!94 = !DILocation(line: 1037, column: 32, scope: !27, inlinedAt: !28)
!95 = !DILocation(line: 923, column: 34, scope: !27, inlinedAt: !28)
!96 = !DILocation(line: 941, column: 66, scope: !27, inlinedAt: !28)
!97 = !DILocation(line: 941, column: 16, scope: !27, inlinedAt: !28)
!98 = !DILocation(line: 289, column: 58, scope: !27, inlinedAt: !28)
!99 = !DILocation(line: 289, column: 41, scope: !27, inlinedAt: !28)
!100 = !DILocation(line: 290, column: 28, scope: !27, inlinedAt: !28)
!101 = !DILocation(line: 290, column: 39, scope: !27, inlinedAt: !28)
!102 = !DILocation(line: 291, column: 30, scope: !27, inlinedAt: !28)
!103 = !DILocation(line: 294, column: 41, scope: !27, inlinedAt: !28)
!104 = !DILocation(line: 294, column: 34, scope: !27, inlinedAt: !28)
!105 = !DILocation(line: 295, column: 26, scope: !27, inlinedAt: !28)
!106 = !DILocation(line: 295, column: 35, scope: !27, inlinedAt: !28)
!107 = !DILocation(line: 302, column: 27, scope: !27, inlinedAt: !28)
!108 = !DILocation(line: 297, column: 26, scope: !27, inlinedAt: !28)
!109 = !DILocation(line: 239, column: 78, scope: !5)
!110 = !DILocation(line: 239, column: 93, scope: !5)
!111 = !DILocation(line: 239, column: 110, scope: !5)
!112 = !DILocation(line: 1031, column: 29, scope: !27, inlinedAt: !28)
!113 = !DILocation(line: 1031, column: 16, scope: !27, inlinedAt: !28)
!114 = !DILocation(line: 1032, column: 22, scope: !27, inlinedAt: !28)
!115 = !DILocation(line: 1033, column: 31, scope: !27, inlinedAt: !28)
!116 = !DILocation(line: 1033, column: 22, scope: !27, inlinedAt: !28)
!117 = !DILocation(line: 1033, column: 39, scope: !27, inlinedAt: !28)
!118 = !DILocation(line: 1034, column: 26, scope: !27, inlinedAt: !28)
!119 = !DILocation(line: 1037, column: 66, scope: !27, inlinedAt: !28)
!120 = !DILocation(line: 1038, column: 24, scope: !27, inlinedAt: !28)
!121 = !DILocation(line: 1038, column: 16, scope: !27, inlinedAt: !28)
!122 = !DILocation(line: 1647, column: 4, scope: !5)
